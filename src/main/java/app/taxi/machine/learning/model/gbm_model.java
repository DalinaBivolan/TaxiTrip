/*
  Licensed under the Apache License, Version 2.0
    http://www.apache.org/licenses/LICENSE-2.0.html

  AUTOGENERATED BY H2O at 2018-06-20T23:05:02.761+03:00
  3.20.0.1
  
  Standalone prediction code with sample test data for GBMModel named gbm_model

  How to download, compile and execute:
      mkdir tmpdir
      cd tmpdir
      curl http://192.168.1.8:54321/3/h2o-genmodel.jar > h2o-genmodel.jar
      curl http://192.168.1.8:54321/3/Models.java/gbm-model > gbm_model.java
      javac -cp h2o-genmodel.jar -J-Xmx2g -J-XX:MaxPermSize=128m gbm_model.java

     (Note:  Try java argument -XX:+PrintCompilation to show runtime JIT compiler behavior.)
*/
package app.taxi.machine.learning.model;

//import java.util.Map;
import hex.genmodel.GenModel;
import hex.genmodel.annotations.ModelPojo;

@ModelPojo(name="gbm_model", algorithm="gbm")
public class gbm_model extends GenModel {
  /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

public hex.ModelCategory getModelCategory() { return hex.ModelCategory.Regression; }

  public boolean isSupervised() { return true; }
  public int nfeatures() { return 13; }
  public int nclasses() { return 1; }

  // Names of columns used by model.
  public static final String[] NAMES = NamesHolder_gbm_model.VALUES;

  // Column domains. The last array contains domain of response column.
  public static final String[][] DOMAINS = new String[][] {
    /* C1 */ null,
    /* pickup_longitude */ null,
    /* pickup_latitude */ null,
    /* dropoff_longitude */ null,
    /* dropoff_latitude */ null,
    /* pickup_weekday */ null,
    /* pickup_hour */ null,
    /* lat_diff */ null,
    /* lon_diff */ null,
    /* log_haversine_distance */ null,
    /* log_euclidean_distance */ null,
    /* log_manhattan_distance */ null,
    /* total_distance */ null,
    /* log_trip_duration */ null
  };
  // Prior class distribution
  public static final double[] PRIOR_CLASS_DISTRIB = {1.0};
  // Class distribution used for model building
  public static final double[] MODEL_CLASS_DISTRIB = {1.0};

  public gbm_model() { super(NAMES,DOMAINS,"log_trip_duration"); }
  public String getUUID() { return Long.toString(3271591737792496576L); }

  // Pass in data in a double[], pre-aligned to the Model's requirements.
  // Jam predictions into the preds[] array; preds[0] is reserved for the
  // main prediction (class for classifiers or value for regression),
  // and remaining columns hold a probability distribution for classifiers.
  public final double[] score0( double[] data, double[] preds ) {
    java.util.Arrays.fill(preds,0);
    gbm_model_Forest_0.score0(data,preds);
    gbm_model_Forest_1.score0(data,preds);
    gbm_model_Forest_2.score0(data,preds);
    gbm_model_Forest_3.score0(data,preds);
    gbm_model_Forest_4.score0(data,preds);
    gbm_model_Forest_5.score0(data,preds);
    gbm_model_Forest_6.score0(data,preds);
    gbm_model_Forest_7.score0(data,preds);
    gbm_model_Forest_8.score0(data,preds);
    gbm_model_Forest_9.score0(data,preds);
    gbm_model_Forest_10.score0(data,preds);
    gbm_model_Forest_11.score0(data,preds);
    gbm_model_Forest_12.score0(data,preds);
    gbm_model_Forest_13.score0(data,preds);
    gbm_model_Forest_14.score0(data,preds);
    gbm_model_Forest_15.score0(data,preds);
    gbm_model_Forest_16.score0(data,preds);
    gbm_model_Forest_17.score0(data,preds);
    gbm_model_Forest_18.score0(data,preds);
    gbm_model_Forest_19.score0(data,preds);
    gbm_model_Forest_20.score0(data,preds);
    gbm_model_Forest_21.score0(data,preds);
    gbm_model_Forest_22.score0(data,preds);
    gbm_model_Forest_23.score0(data,preds);
    gbm_model_Forest_24.score0(data,preds);
    gbm_model_Forest_25.score0(data,preds);
    gbm_model_Forest_26.score0(data,preds);
    gbm_model_Forest_27.score0(data,preds);
    gbm_model_Forest_28.score0(data,preds);
    gbm_model_Forest_29.score0(data,preds);
    gbm_model_Forest_30.score0(data,preds);
    gbm_model_Forest_31.score0(data,preds);
    gbm_model_Forest_32.score0(data,preds);
    gbm_model_Forest_33.score0(data,preds);
    gbm_model_Forest_34.score0(data,preds);
    gbm_model_Forest_35.score0(data,preds);
    gbm_model_Forest_36.score0(data,preds);
    gbm_model_Forest_37.score0(data,preds);
    gbm_model_Forest_38.score0(data,preds);
    gbm_model_Forest_39.score0(data,preds);
    gbm_model_Forest_40.score0(data,preds);
    gbm_model_Forest_41.score0(data,preds);
    gbm_model_Forest_42.score0(data,preds);
    gbm_model_Forest_43.score0(data,preds);
    gbm_model_Forest_44.score0(data,preds);
    gbm_model_Forest_45.score0(data,preds);
    gbm_model_Forest_46.score0(data,preds);
    gbm_model_Forest_47.score0(data,preds);
    gbm_model_Forest_48.score0(data,preds);
    gbm_model_Forest_49.score0(data,preds);
    preds[0] += 6.456810530369127;
    preds[0] = preds[0];
    return preds;
  }
}
// The class representing training column names
class NamesHolder_gbm_model implements java.io.Serializable {
  /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
public static final String[] VALUES = new String[13];
  static {
    NamesHolder_gbm_model_0.fill(VALUES);
  }
  static final class NamesHolder_gbm_model_0 implements java.io.Serializable {
    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	static final void fill(String[] sa) {
      sa[0] = "C1";
      sa[1] = "pickup_longitude";
      sa[2] = "pickup_latitude";
      sa[3] = "dropoff_longitude";
      sa[4] = "dropoff_latitude";
      sa[5] = "pickup_weekday";
      sa[6] = "pickup_hour";
      sa[7] = "lat_diff";
      sa[8] = "lon_diff";
      sa[9] = "log_haversine_distance";
      sa[10] = "log_euclidean_distance";
      sa[11] = "log_manhattan_distance";
      sa[12] = "total_distance";
    }
  }
}

class gbm_model_Forest_0 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_0_class_0.score0(fdata);
  }
}
class gbm_model_Tree_0_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2580.1826f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1280.0125f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <725.0071f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <294.53412f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.79221f ? 
                        -0.17075057f : 
                        -0.3334834f) : 
                     (data[9 /* log_haversine_distance */] <0.008525033f ? 
                        -0.30526996f : 
                        -0.12542194f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.767666f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.1038978f : 
                        -0.071339324f) : 
                     (data[12 /* total_distance */] <976.53906f ? 
                        -0.11591445f : 
                        -0.093835995f))) : 
             (data[12 /* total_distance */] <1803.0946f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.769512f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.071309425f : 
                        -0.037119497f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.06527201f : 
                        -0.087343976f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[12 /* total_distance */] <2167.3188f ? 
                        -0.051866688f : 
                        -0.03752988f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.77102f ? 
                        -0.007954068f : 
                        -0.03461445f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <7041.2314f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <3904.5686f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <3180.2734f ? 
                        -0.02187472f : 
                        -0.0068669333f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.023143768f : 
                        9.081035E-4f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[12 /* total_distance */] <5080.825f ? 
                        0.008927235f : 
                        0.028086592f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.055445377f : 
                        0.035084795f))) : 
             (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.102871135f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <2.0869093f ? 
                        0.049691964f : 
                        0.07063241f) : 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <10115.028f ? 
                        0.073620126f : 
                        0.091858186f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.17449372f ? 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.08460587f : 
                        0.113166444f) : 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.10487297f : 
                        0.14906037f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_1 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_1_class_0.score0(fdata);
  }
}
class gbm_model_Tree_1_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2738.9631f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1369.4816f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <834.52783f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <339.02692f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.79221f ? 
                        -0.1522059f : 
                        -0.29932183f) : 
                     (data[9 /* log_haversine_distance */] <0.009479658f ? 
                        -0.27764282f : 
                        -0.10616525f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.769375f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.08814086f : 
                        -0.058197044f) : 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <1127.0687f ? 
                        -0.09602017f : 
                        -0.07779258f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <2016.7457f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.77122f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.057325833f : 
                        -0.02692745f) : 
                     (data[12 /* total_distance */] <1672.875f ? 
                        -0.06391815f : 
                        -0.048054952f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[4 /* dropoff_latitude */] <40.738293f ? 
                        -0.02247099f : 
                        -0.03785977f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.771835f ? 
                        -6.06805E-4f : 
                        -0.02465141f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <7699.69f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <4308.5933f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.0128320735f : 
                        0.004443126f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.027160307f : 
                        0.008167698f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <6163.053f ? 
                        0.016507672f : 
                        0.03480638f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.056035355f : 
                        0.03904302f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <15293.199f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <11615.098f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.051981736f : 
                        0.07093509f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.07016403f : 
                        0.09098179f)) : 
                 (data[10 /* log_euclidean_distance */] <0.17882182f ? 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.0827158f : 
                        0.10668569f) : 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.09449465f : 
                        0.13463429f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_2 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_2_class_0.score0(fdata);
  }
}
class gbm_model_Tree_2_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2461.0972f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1163.2529f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <645.2419f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.79221f ? 
                     (data[12 /* total_distance */] <332.68124f ? 
                        -0.13726906f : 
                        -0.107967675f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.651226f ? 
                        -0.2753601f : 
                        -0.058583036f)) : 
                 (data[11 /* log_manhattan_distance */] <2.6600336E-4f ? 
                     (data[11 /* log_manhattan_distance */] <5.7071764E-5f ? 
                        -0.31226608f : 
                        -0.202796f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.76769f ? 
                        -0.06860643f : 
                        -0.08909149f))) : 
             (data[12 /* total_distance */] <1695.532f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.769512f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.06280989f : 
                        -0.035200793f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.05667378f : 
                        -0.074471794f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[4 /* dropoff_latitude */] <40.73705f ? 
                        -0.027570104f : 
                        -0.04358123f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.77122f ? 
                        -0.010045479f : 
                        -0.03279761f)))) : 
         (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <1.7021202f ? 
             (data[12 /* total_distance */] <3505.2676f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.020265788f : 
                        -0.0057895756f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.771313f ? 
                        0.01412848f : 
                        -0.006831394f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[12 /* total_distance */] <4483.1875f ? 
                        8.51235E-4f : 
                        0.017493496f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.03866709f : 
                        0.021907946f))) : 
             (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.09902563f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.06278585f ? 
                        0.032275308f : 
                        0.05437537f) : 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <8632.427f ? 
                        0.05510247f : 
                        0.070206285f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.16797437f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.07101411f : 
                        0.091612756f) : 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.08480202f : 
                        0.12017615f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_3 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_3_class_0.score0(fdata);
  }
}
class gbm_model_Tree_3_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2897.7437f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1460.1912f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <884.1001f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <455.8641f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.79221f ? 
                        -0.11862593f : 
                        -0.24157473f) : 
                     (data[11 /* log_manhattan_distance */] <2.0352981E-4f ? 
                        -0.21643226f : 
                        -0.082710035f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.767666f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.06902413f : 
                        -0.043058112f) : 
                     (data[12 /* total_distance */] <1091.1641f ? 
                        -0.07706896f : 
                        -0.061232693f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <2105.947f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.77293f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.043138016f : 
                        -0.018892301f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.04008951f : 
                        -0.06068746f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.02816589f : 
                        -0.014017132f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.0035386735f : 
                        -0.017110674f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <8132.6147f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <4492.7827f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.007847773f : 
                        0.0074659265f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.024286298f : 
                        0.0063630557f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <6255.828f ? 
                        0.014483406f : 
                        0.029912926f) : 
                     (data[10 /* log_euclidean_distance */] <0.01606622f ? 
                        -0.06403845f : 
                        0.042471927f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <16134.398f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <11946.01f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.04422016f : 
                        0.059161406f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.058523886f : 
                        0.075494505f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.1961261f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.093821414f : 
                        0.07320277f) : 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.07849752f : 
                        0.11214928f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_4 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_4_class_0.score0(fdata);
  }
}
class gbm_model_Tree_4_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2421.402f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1120.8444f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <547.2873f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.79221f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.12636544f : 
                        -0.09749893f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.651203f ? 
                        -0.2255654f : 
                        -0.026175147f)) : 
                 (data[10 /* log_euclidean_distance */] <1.0250742E-4f ? 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <4.8534836E-5f ? 
                        -0.27159172f : 
                        -0.157656f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.76769f ? 
                        -0.05908784f : 
                        -0.07623661f))) : 
             (data[12 /* total_distance */] <1633.9542f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.767803f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.052758817f : 
                        -0.030190386f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.046845563f : 
                        -0.06372251f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.037553903f : 
                        -0.022887811f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        -0.007624624f : 
                        -0.025828429f)))) : 
         (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <1.6825556f ? 
             (data[12 /* total_distance */] <3466.7505f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[4 /* dropoff_latitude */] <40.747368f ? 
                        -0.007834607f : 
                        -0.018576367f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.774734f ? 
                        0.010730243f : 
                        -0.009904861f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <4692.167f ? 
                        0.0017747298f : 
                        0.015045014f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.778088f ? 
                        0.029703865f : 
                        0.010911318f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <13172.646f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[12 /* total_distance */] <8366.771f ? 
                        0.024271375f : 
                        0.04234452f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.05626641f : 
                        0.040876992f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.17317396f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.074969545f : 
                        0.058742948f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.09994471f : 
                        0.07444369f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_5 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_5_class_0.score0(fdata);
  }
}
class gbm_model_Tree_5_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2818.3533f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1321.1031f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <779.24445f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <231.3382f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.79221f ? 
                        -0.10413387f : 
                        -0.20015807f) : 
                     (data[9 /* log_haversine_distance */] <0.009021389f ? 
                        -0.19790782f : 
                        -0.073939875f)) : 
                 (data[12 /* total_distance */] <1016.3063f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.074358165f : 
                        -0.05453841f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.80255f ? 
                        -0.042102143f : 
                        -0.251446f))) : 
             (data[12 /* total_distance */] <1941.0363f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.774635f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.04001237f : 
                        -0.020003209f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.039549433f : 
                        -0.056367658f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.769512f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.020378785f : 
                        4.6311851E-4f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.01455233f : 
                        -0.03342735f)))) : 
         (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <1.8195078f ? 
             (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.03172925f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[10 /* log_euclidean_distance */] <0.012396555f ? 
                        -0.09293752f : 
                        -0.0035374116f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.017953167f : 
                        0.0021737881f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <5370.7f ? 
                        0.0053392537f : 
                        0.019804422f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.037143532f : 
                        0.022191303f))) : 
             (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.10094838f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[4 /* dropoff_latitude */] <40.702206f ? 
                        0.04911936f : 
                        0.03105908f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.05306918f : 
                        0.04081068f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.14971572f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.06750429f : 
                        0.048919894f) : 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.05746045f : 
                        0.08740842f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_6 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_6_class_0.score0(fdata);
  }
}
class gbm_model_Tree_6_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2342.012f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1134.412f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <615.95026f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.79221f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.10100526f : 
                        -0.07604052f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.670063f ? 
                        -0.18223278f : 
                        0.04127309f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[4 /* dropoff_latitude */] <40.73002f ? 
                        -0.052876875f : 
                        -0.071844324f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.771114f ? 
                        -0.043188438f : 
                        -0.061121218f))) : 
             (data[12 /* total_distance */] <1568.3889f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.766094f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.04440575f : 
                        -0.025115553f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.03968283f : 
                        -0.0602037f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.769512f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.026805094f : 
                        -0.008635788f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.023216764f : 
                        -0.04071521f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <6007.9956f ? 
             (data[12 /* total_distance */] <3272.8938f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.01655427f : 
                        -0.004416436f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.009202828f : 
                        -0.0075106625f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        7.1797107E-4f : 
                        0.0161953f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.02623721f : 
                        0.0120183425f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <13179.518f ? 
                 (data[10 /* log_euclidean_distance */] <0.02308318f ? 
                     (data[10 /* log_euclidean_distance */] <0.010104961f ? 
                        -0.07755157f : 
                        -0.026710557f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.028278831f : 
                        0.04153517f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.18074451f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.767498f ? 
                        0.06308246f : 
                        0.048887722f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.08202207f : 
                        0.05882066f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_7 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_7_class_0.score0(fdata);
  }
}
class gbm_model_Tree_7_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2977.1338f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1500.1963f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <838.00024f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <229.14069f ? 
                     (data[12 /* total_distance */] <3.5803232f ? 
                        -0.07176874f : 
                        -0.11379033f) : 
                     (data[11 /* log_manhattan_distance */] <1.9264186E-4f ? 
                        -0.15749837f : 
                        -0.05811366f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.774513f ? 
                     (data[9 /* log_haversine_distance */] <0.043353837f ? 
                        -0.21415867f : 
                        -0.0313893f) : 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        -0.073802434f : 
                        -0.046668217f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <2157.88f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.00866466f : 
                        -0.025780426f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.966995f ? 
                        -0.025540896f : 
                        -0.0454169f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.774635f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.0138601f : 
                        0.0034883954f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.01255481f : 
                        -0.030258078f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <9231.053f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <4711.667f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.779575f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -4.0815523E-4f : 
                        0.016589446f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.792778f ? 
                        9.5503114E-4f : 
                        -0.012743075f)) : 
                 (data[10 /* log_euclidean_distance */] <0.017606806f ? 
                     (data[10 /* log_euclidean_distance */] <6.959626E-4f ? 
                        -0.24345608f : 
                        -0.045788005f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.01648178f : 
                        0.030286342f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <16717.074f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[4 /* dropoff_latitude */] <40.702187f ? 
                        0.048649896f : 
                        0.03158041f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.05342461f : 
                        0.03725553f)) : 
                 (data[6 /* pickup_hour */] <6.0f ? 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.2072087f ? 
                        0.040903654f : 
                        0.05204695f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.07538352f : 
                        0.0526295f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_8 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_8_class_0.score0(fdata);
  }
}
class gbm_model_Tree_8_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.019468183f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1190.8535f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <697.76575f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.79221f ? 
                     (data[12 /* total_distance */] <294.3422f ? 
                        -0.07563115f : 
                        -0.05717733f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.670063f ? 
                        -0.15595613f : 
                        0.044178918f)) : 
                 (data[9 /* log_haversine_distance */] <0.018386573f ? 
                     (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <0.0043533794f ? 
                        -0.21026137f : 
                        -0.13159421f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.05405669f : 
                        -0.036183476f))) : 
             (data[10 /* log_euclidean_distance */] <0.013156229f ? 
                 (data[9 /* log_haversine_distance */] <0.0818551f ? 
                     (data[2 /* pickup_latitude */] <40.750576f ? 
                        -0.28573507f : 
                        -0.17282318f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.020000214f : 
                        -0.03480049f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.774635f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.0019139288f : 
                        -0.014709292f) : 
                     (data[12 /* total_distance */] <2001.6f ? 
                        -0.031797826f : 
                        -0.016182244f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <6430.609f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <3678.2664f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.774475f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.006738027f : 
                        0.0094592385f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.0053990805f : 
                        -0.021189936f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.78134f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.0077253063f : 
                        0.022764461f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.0065435013f : 
                        -0.007877521f))) : 
             (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.094722435f ? 
                 (data[4 /* dropoff_latitude */] <40.70047f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.839005f ? 
                        0.04481155f : 
                        -0.0072592855f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.021508534f : 
                        0.03244213f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.19762294f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.05139185f : 
                        0.036083076f) : 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.042573974f : 
                        0.0687641f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_9 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_9_class_0.score0(fdata);
  }
}
class gbm_model_Tree_9_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2302.317f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1038.7406f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <547.7734f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.7902f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.08033703f : 
                        -0.057679407f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.651203f ? 
                        -0.14483511f : 
                        0.0065372577f)) : 
                 (data[9 /* log_haversine_distance */] <0.005564106f ? 
                     (data[6 /* pickup_hour */] <4.0f ? 
                        -0.09440856f : 
                        -0.19759904f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.76769f ? 
                        -0.036618527f : 
                        -0.050012954f))) : 
             (data[12 /* total_distance */] <1606.3552f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[4 /* dropoff_latitude */] <40.737038f ? 
                        -0.024110736f : 
                        -0.04347891f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.017552307f : 
                        -0.036202304f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.767803f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.021436801f : 
                        -0.0052708033f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.017122546f : 
                        -0.032068f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <5522.7383f ? 
             (data[12 /* total_distance */] <3220.6997f ? 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96708f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        0.005154045f : 
                        -0.010711094f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.0058882865f : 
                        -0.024708403f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -3.4067282E-4f : 
                        0.018413728f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.97721f ? 
                        0.009644075f : 
                        -0.005108538f))) : 
             (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <2.2174637f ? 
                 (data[10 /* log_euclidean_distance */] <0.023081131f ? 
                     (data[10 /* log_euclidean_distance */] <0.0050556613f ? 
                        -0.16032128f : 
                        -0.027536577f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.791595f ? 
                        0.027372923f : 
                        0.012157155f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.14805773f ? 
                     (data[7 /* lat_diff */] <-0.014200687f ? 
                        0.03190767f : 
                        0.04459263f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.05947486f : 
                        0.040949915f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_10 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_10_class_0.score0(fdata);
  }
}
class gbm_model_Tree_10_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.017785747f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1032.073f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <548.28876f ? 
                 (data[4 /* dropoff_latitude */] <40.651203f ? 
                     (data[1 /* pickup_longitude */] <-73.965485f ? 
                        -0.0052750628f : 
                        -0.128394f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.07172725f : 
                        -0.051781494f)) : 
                 (data[9 /* log_haversine_distance */] <0.0055384566f ? 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        -0.06044167f : 
                        -0.17429928f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.050350323f : 
                        -0.03443965f))) : 
             (data[10 /* log_euclidean_distance */] <0.012019259f ? 
                 (data[9 /* log_haversine_distance */] <0.043261066f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.772564f ? 
                        -0.22041984f : 
                        -0.07839427f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.035009664f : 
                        -0.019630305f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.769512f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.0038179809f : 
                        -0.017583445f) : 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.0039283037f ? 
                        -0.026484633f : 
                        -0.012587005f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <5160.365f ? 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.775234f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.003909789f : 
                        0.012923163f) : 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.013383216f : 
                        -0.007948678f)) : 
                 (data[12 /* total_distance */] <3117.2437f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.01292932f ? 
                        -0.019221777f : 
                        -0.0056029563f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.0029716804f : 
                        -0.011556865f))) : 
             (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <2.2243538f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.055581953f ? 
                        0.009771262f : 
                        0.02035291f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        0.027227305f : 
                        0.010642283f)) : 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <19854.402f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.026308134f : 
                        0.039290264f) : 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.029274393f : 
                        0.05277037f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_11 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_11_class_0.score0(fdata);
  }
}
class gbm_model_Tree_11_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2659.5728f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1231.0913f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <735.7694f ? 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95339f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.056791704f : 
                        -0.03999302f) : 
                     (data[4 /* dropoff_latitude */] <40.651203f ? 
                        -0.11465677f : 
                        -0.061527204f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.776226f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.022340361f : 
                        -0.037801817f) : 
                     (data[7 /* lat_diff */] <-0.0054483414f ? 
                        -0.04809937f : 
                        -0.035887882f))) : 
             (data[12 /* total_distance */] <1850.4404f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.03140161f : 
                        -0.010636617f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.96914f ? 
                        -0.023122126f : 
                        -0.040645093f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.019168548f : 
                        8.720673E-4f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.971375f ? 
                        -0.011803025f : 
                        -0.027981242f)))) : 
         (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <1.8847232f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <4143.514f ? 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96706f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.003362261f : 
                        0.009296856f) : 
                     (data[9 /* log_haversine_distance */] <0.20502134f ? 
                        -0.29330066f : 
                        -0.004727107f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.78306f ? 
                     (data[10 /* log_euclidean_distance */] <0.021055073f ? 
                        -0.027563287f : 
                        0.017662924f) : 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.00828886f ? 
                        -8.3047425E-4f : 
                        0.013385735f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <14234.13f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.79328f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.021316674f : 
                        0.029668685f) : 
                     (data[2 /* pickup_latitude */] <40.75428f ? 
                        0.023684733f : 
                        0.0077470066f)) : 
                 (data[6 /* pickup_hour */] <6.0f ? 
                     (data[5 /* pickup_weekday */] <3.5f ? 
                        0.019246802f : 
                        0.029255666f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.04849792f : 
                        0.030397747f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_12 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_12_class_0.score0(fdata);
  }
}
class gbm_model_Tree_12_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <3016.8289f ? 
         (data[10 /* log_euclidean_distance */] <0.010094613f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <919.1813f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <157.98428f ? 
                     (data[12 /* total_distance */] <2.4685044f ? 
                        -0.036289755f : 
                        -0.08954599f) : 
                     (data[10 /* log_euclidean_distance */] <1.5769491E-4f ? 
                        -0.11188095f : 
                        -0.033695716f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.82243f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.018775431f : 
                        -0.03142847f) : 
                     (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <0.29525083f ? 
                        -0.19684891f : 
                        -0.072634935f))) : 
             (data[12 /* total_distance */] <1897.2844f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.769512f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        -0.008073965f : 
                        -0.023989346f) : 
                     (data[12 /* total_distance */] <1365.5906f ? 
                        -0.035870727f : 
                        -0.020691598f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.004573349f : 
                        -0.013050369f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.97919f ? 
                        -0.0041825357f : 
                        -0.02033755f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <8823.17f ? 
             (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.033652004f ? 
                 (data[10 /* log_euclidean_distance */] <0.012096133f ? 
                     (data[9 /* log_haversine_distance */] <0.24560155f ? 
                        -0.19760072f : 
                        -0.053271953f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.009363161f : 
                        -0.0016626887f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.7916f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        0.008322276f : 
                        0.01936977f) : 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.013242722f ? 
                        -0.0039965473f : 
                        0.012801117f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <16779.328f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        0.013436869f : 
                        0.030876858f) : 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.03478656f : 
                        0.017326051f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.04753794f : 
                        0.027356755f) : 
                     (data[6 /* pickup_hour */] <12.0f ? 
                        0.013515374f : 
                        0.037797675f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_13 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_13_class_0.score0(fdata);
  }
}
class gbm_model_Tree_13_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2262.6216f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <994.3161f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <337.9121f ? 
                 (Double.isNaN(data[7]) || data[7 /* lat_diff */] <1.1444092E-5f ? 
                     (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <0.004582117f ? 
                        -0.027142512f : 
                        -0.056390107f) : 
                     (data[10 /* log_euclidean_distance */] <1.2471473E-4f ? 
                        -0.17443554f : 
                        -0.056291953f)) : 
                 (data[9 /* log_haversine_distance */] <0.005405f ? 
                     (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <0.0036149838f ? 
                        -0.15405343f : 
                        -0.0944517f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.768467f ? 
                        -0.024901593f : 
                        -0.03782944f))) : 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.766808f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[4 /* dropoff_latitude */] <40.73491f ? 
                        -0.009713144f : 
                        -0.024986f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        -0.002156691f : 
                        -0.016175637f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.013651878f : 
                        -0.031460542f) : 
                     (data[3 /* dropoff_longitude */] <-73.97623f ? 
                        -0.02050678f : 
                        -0.034179676f)))) : 
         (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.03845567f ? 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.014922323f : 
                        0.013955419f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <2.5f ? 
                        -0.009916797f : 
                        0.0018320627f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.97711f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        0.006424565f : 
                        -0.0033353367f) : 
                     (data[8 /* lon_diff */] <-0.022023678f ? 
                        0.001240093f : 
                        -0.01597114f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <11409.149f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.79328f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.88009f ? 
                        0.01844783f : 
                        -0.010135405f) : 
                     (data[2 /* pickup_latitude */] <40.75744f ? 
                        0.013684404f : 
                        -7.857156E-4f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.20231292f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.03040153f : 
                        0.01991972f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.04709958f : 
                        0.033001103f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_14 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_14_class_0.score0(fdata);
  }
}
class gbm_model_Tree_14_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <3056.524f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1396.927f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <769.4012f ? 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95742f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.043392785f : 
                        -0.027354382f) : 
                     (data[4 /* dropoff_latitude */] <40.651203f ? 
                        -0.0930734f : 
                        -0.04433592f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.033182748f : 
                        -0.0133474115f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.97789f ? 
                        -0.019948414f : 
                        -0.03837687f))) : 
             (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96044f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.015285362f : 
                        4.748563E-4f) : 
                     (data[6 /* pickup_hour */] <2.5f ? 
                        0.0029431474f : 
                        -0.017575666f)) : 
                 (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.0053908825f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.018015642f : 
                        -0.031625647f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95098f ? 
                        -0.0031320471f : 
                        -0.022183703f)))) : 
         (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <1.9955893f ? 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.0020691892f : 
                        0.013103316f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.017963491f : 
                        0.0049562138f)) : 
                 (data[6 /* pickup_hour */] <1.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.771214f ? 
                        0.01786539f : 
                        -0.0019048359f) : 
                     (data[6 /* pickup_hour */] <11.5f ? 
                        -0.0100644175f : 
                        5.2836613E-4f))) : 
             (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.10846794f ? 
                 (data[4 /* dropoff_latitude */] <40.70047f ? 
                     (data[6 /* pickup_hour */] <13.5f ? 
                        0.021606203f : 
                        0.03937737f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.019999256f : 
                        0.011418366f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (data[6 /* pickup_hour */] <4.5f ? 
                        0.009849379f : 
                        0.041112173f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.017662466f ? 
                        0.020927975f : 
                        0.0034160453f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_15 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_15_class_0.score0(fdata);
  }
}
class gbm_model_Tree_15_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.016584007f ? 
         (data[10 /* log_euclidean_distance */] <0.00861591f ? 
             (data[4 /* dropoff_latitude */] <40.655483f ? 
                 (data[1 /* pickup_longitude */] <-73.838554f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.111097544f : 
                        0.014820586f) : 
                     (data[3 /* dropoff_longitude */] <-73.791855f ? 
                        -0.22932534f : 
                        -0.09734067f)) : 
                 (data[12 /* total_distance */] <650.6188f ? 
                     (data[8 /* lon_diff */] <-7.1036926E-15f ? 
                        -0.03829873f : 
                        -0.02661765f) : 
                     (data[11 /* log_manhattan_distance */] <1.899923E-4f ? 
                        -0.11586204f : 
                        -0.01994342f))) : 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.030107526f : 
                        -0.008190199f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.001174657f : 
                        -0.017259505f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.977684f ? 
                     (data[6 /* pickup_hour */] <12.0f ? 
                        -0.017751241f : 
                        -0.0071745007f) : 
                     (data[8 /* lon_diff */] <-0.010435104f ? 
                        -0.01574113f : 
                        -0.029754514f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <4922.1943f ? 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.770077f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.004227655f : 
                        0.00892474f) : 
                     (data[6 /* pickup_hour */] <2.5f ? 
                        0.009706114f : 
                        -0.007728655f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.0010212241f : 
                        -0.013056456f) : 
                     (data[12 /* total_distance */] <3262.05f ? 
                        -0.020446273f : 
                        -0.010084223f))) : 
             (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.09100268f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.953125f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.781254f ? 
                        0.017159043f : 
                        0.0074940715f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.875694f ? 
                        0.0070452653f : 
                        -0.013627371f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        0.01275146f : 
                        0.031985667f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.76759f ? 
                        0.020919442f : 
                        0.0063977423f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_16 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_16_class_0.score0(fdata);
  }
}
class gbm_model_Tree_16_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.020429574f ? 
         (data[10 /* log_euclidean_distance */] <0.009935477f ? 
             (data[9 /* log_haversine_distance */] <0.041910514f ? 
                 (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <3.274259E-4f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.01855206f : 
                        0.023676101f) : 
                     (data[10 /* log_euclidean_distance */] <4.678841E-5f ? 
                        -0.18232264f : 
                        -0.0662115f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.030157505f : 
                        -0.013632282f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.98187f ? 
                        -0.02156263f : 
                        -0.034750283f))) : 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.77537f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        -0.010762444f : 
                        0.0016504294f) : 
                     (data[5 /* pickup_weekday */] <2.5f ? 
                        -0.018438514f : 
                        -0.0069498057f)) : 
                 (data[12 /* total_distance */] <1433.9797f ? 
                     (data[7 /* lat_diff */] <-0.007838726f ? 
                        -0.03799897f : 
                        -0.020988222f) : 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.0038712025f ? 
                        -0.017571418f : 
                        -0.0074549336f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <6668.78f ? 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.77695f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.012832772f : 
                        1.2295654E-5f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.97726f ? 
                        0.004628637f : 
                        -0.005031638f)) : 
                 (data[2 /* pickup_latitude */] <40.7539f ? 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95478f ? 
                        0.012169679f : 
                        -0.0042102756f) : 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.0067572594f ? 
                        -0.0094973175f : 
                        0.0017281523f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <15561.727f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        0.008824471f : 
                        0.020841753f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.94756f ? 
                        0.012932805f : 
                        -0.005025609f)) : 
                 (data[6 /* pickup_hour */] <13.5f ? 
                     (data[3 /* dropoff_longitude */] <-73.94054f ? 
                        0.029579584f : 
                        0.010138654f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.040954668f : 
                        0.018215176f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_17 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_17_class_0.score0(fdata);
  }
}
class gbm_model_Tree_17_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.015862964f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <952.6828f ? 
             (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95742f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (data[10 /* log_euclidean_distance */] <1.7273644E-4f ? 
                        -0.053532183f : 
                        -0.028148001f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        -0.014179957f : 
                        -0.027424144f)) : 
                 (data[2 /* pickup_latitude */] <40.765965f ? 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.92556f ? 
                        -0.06065027f : 
                        -0.037379354f) : 
                     (data[7 /* lat_diff */] <-0.002610743f ? 
                        -0.04268268f : 
                        -0.022030402f))) : 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.022486912f : 
                        -0.009357061f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        -0.0024058532f : 
                        -0.013719641f)) : 
                 (data[6 /* pickup_hour */] <2.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.74451f ? 
                        0.008692539f : 
                        -0.017304845f) : 
                     (data[6 /* pickup_hour */] <10.5f ? 
                        -0.033969797f : 
                        -0.019333106f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <4128.292f ? 
             (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96703f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <20.5f ? 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        -0.003169297f : 
                        0.00704092f) : 
                     (data[5 /* pickup_weekday */] <2.5f ? 
                        -0.012569563f : 
                        -3.482842E-4f)) : 
                 (data[1 /* pickup_longitude */] <-73.97355f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.791862f ? 
                        0.0019471373f : 
                        -0.026286358f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.011057377f ? 
                        -0.01706003f : 
                        -0.0062750056f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <9834.465f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.784687f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.88009f ? 
                        0.011420981f : 
                        -0.018420259f) : 
                     (data[2 /* pickup_latitude */] <40.754013f ? 
                        0.008598555f : 
                        -0.001976603f)) : 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.20114602f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.01963265f : 
                        0.011886109f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.033302903f : 
                        0.020693792f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_18 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_18_class_0.score0(fdata);
  }
}
class gbm_model_Tree_18_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.023073401f ? 
         (data[10 /* log_euclidean_distance */] <0.0115817655f ? 
             (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.959435f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.022256956f : 
                        -0.009044481f) : 
                     (data[6 /* pickup_hour */] <2.5f ? 
                        -0.007250942f : 
                        -0.02521739f)) : 
                 (data[4 /* dropoff_latitude */] <40.65634f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <650.6188f ? 
                        -0.06412874f : 
                        -0.10964946f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-3.5492442E-15f ? 
                        -0.027891522f : 
                        -0.016753968f))) : 
             (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96447f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.009757812f : 
                        0.001984266f) : 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.008145331f : 
                        -0.011973691f)) : 
                 (data[7 /* lat_diff */] <-0.008017361f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.0022141933f ? 
                        -0.020078199f : 
                        -8.963414E-4f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95377f ? 
                        -6.312975E-4f : 
                        -0.013199832f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <7462.682f ? 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.78039f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -4.90917E-4f : 
                        0.010424897f) : 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.011884318f : 
                        -0.0036596968f)) : 
                 (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.009085536f ? 
                     (data[8 /* lon_diff */] <-0.030752772f ? 
                        0.003918685f : 
                        -0.008922483f) : 
                     (data[2 /* pickup_latitude */] <40.769745f ? 
                        0.009894061f : 
                        -4.5199675E-4f))) : 
             (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.11422521f ? 
                 (data[4 /* dropoff_latitude */] <40.70047f ? 
                     (data[6 /* pickup_hour */] <13.5f ? 
                        0.01394457f : 
                        0.027955549f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        0.0129024945f : 
                        0.004316698f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.033749912f : 
                        0.014436927f) : 
                     (data[5 /* pickup_weekday */] <2.5f ? 
                        0.007401888f : 
                        0.01836852f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_19 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_19_class_0.score0(fdata);
  }
}
class gbm_model_Tree_19_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.015141919f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <952.6828f ? 
             (data[12 /* total_distance */] <160.02094f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <1.2501636f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <0.058601417f ? 
                        0.016849736f : 
                        -0.17423053f) : 
                     (data[11 /* log_manhattan_distance */] <1.4960708E-4f ? 
                        -0.13180508f : 
                        -0.04604341f)) : 
                 (data[7 /* lat_diff */] <-0.0041023493f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-6.8354607E-4f ? 
                        -0.03414332f : 
                        -0.00955524f) : 
                     (data[10 /* log_euclidean_distance */] <1.778571E-4f ? 
                        -0.067157425f : 
                        -0.013807853f))) : 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.765953f ? 
                 (data[4 /* dropoff_latitude */] <40.747993f ? 
                     (data[10 /* log_euclidean_distance */] <0.0011864771f ? 
                        -0.14372045f : 
                        -0.010888513f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.015958657f : 
                        0.0020173674f)) : 
                 (data[8 /* lon_diff */] <-0.002621293f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.0033307076f ? 
                        -0.02524108f : 
                        -0.005006404f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.783455f ? 
                        -0.0055569913f : 
                        -0.016430583f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <4048.9019f ? 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.015456966f : 
                        0.008136099f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.97748f ? 
                        -7.250152E-4f : 
                        -0.01265594f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.97027f ? 
                     (data[5 /* pickup_weekday */] <2.5f ? 
                        -0.0104974555f : 
                        0.0011417709f) : 
                     (data[1 /* pickup_longitude */] <-73.980194f ? 
                        -0.00620935f : 
                        -0.0187987f))) : 
             (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <2.1416862f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95084f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.010870053f : 
                        0.003944788f) : 
                     (data[3 /* dropoff_longitude */] <-73.98127f ? 
                        0.011386135f : 
                        -0.0069838227f)) : 
                 (data[6 /* pickup_hour */] <7.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.875595f ? 
                        0.013459691f : 
                        1.1334254E-4f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.022230066f : 
                        0.009974434f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_20 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_20_class_0.score0(fdata);
  }
}
class gbm_model_Tree_20_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <3135.9143f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1537.333f ? 
             (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95843f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.77965f ? 
                     (data[4 /* dropoff_latitude */] <40.74707f ? 
                        -0.01340889f : 
                        -0.005634553f) : 
                     (data[9 /* log_haversine_distance */] <0.20362668f ? 
                        0.005507301f : 
                        -0.023763571f)) : 
                 (data[4 /* dropoff_latitude */] <40.65634f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <624.52814f ? 
                        -0.05197869f : 
                        -0.12214438f) : 
                     (data[7 /* lat_diff */] <-0.0023622513f ? 
                        -0.026081888f : 
                        -0.015202187f))) : 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.017071966f : 
                        0.0047129435f) : 
                     (data[6 /* pickup_hour */] <2.5f ? 
                        0.0049838168f : 
                        -0.009516974f)) : 
                 (data[5 /* pickup_weekday */] <1.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <22.5f ? 
                        -0.014403558f : 
                        -0.023622915f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.97919f ? 
                        -0.0020858124f : 
                        -0.012526772f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <9436.739f ? 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.78383f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[5 /* pickup_weekday */] <0.5f ? 
                        -0.0013426073f : 
                        0.009274457f) : 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.011471219f : 
                        -0.0027731906f)) : 
                 (data[2 /* pickup_latitude */] <40.7523f ? 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        -0.007758589f : 
                        0.010092384f) : 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.005886078f ? 
                        -0.0076043247f : 
                        0.0033250377f))) : 
             (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.20285432f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.767498f ? 
                     (data[1 /* pickup_longitude */] <-73.9759f ? 
                        0.019884344f : 
                        0.012373f) : 
                     (data[3 /* dropoff_longitude */] <-73.960884f ? 
                        0.020110652f : 
                        0.0067397165f)) : 
                 (data[6 /* pickup_hour */] <12.0f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.022365892f : 
                        -0.0028364516f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.032994416f : 
                        0.015400377f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_21 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_21_class_0.score0(fdata);
  }
}
class gbm_model_Tree_21_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2222.9265f ? 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <1063.7051f ? 
             (data[12 /* total_distance */] <461.21588f ? 
                 (data[12 /* total_distance */] <3.603249f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <0.056300767f ? 
                        0.016435208f : 
                        -0.1436032f) : 
                     (data[10 /* log_euclidean_distance */] <1.6919206E-4f ? 
                        -0.08684388f : 
                        -0.023459239f)) : 
                 (data[7 /* lat_diff */] <-0.003684342f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.001137495f ? 
                        -0.027676633f : 
                        -0.0058496743f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.0035480252f ? 
                        -0.0045022788f : 
                        -0.016751608f))) : 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.766808f ? 
                 (data[4 /* dropoff_latitude */] <40.747726f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.74148f ? 
                        -0.0043741497f : 
                        -0.014766463f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.0044408464f : 
                        -0.010536633f)) : 
                 (data[8 /* lon_diff */] <-0.0024300218f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.0039480925f ? 
                        -0.019907115f : 
                        -0.002146398f) : 
                     (data[2 /* pickup_latitude */] <40.77656f ? 
                        3.0222978E-4f : 
                        -0.01090417f)))) : 
         (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.035571493f ? 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <20.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.011556843f : 
                        0.00711051f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.98126f ? 
                        0.001694261f : 
                        -0.007752771f)) : 
                 (data[5 /* pickup_weekday */] <1.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <22.5f ? 
                        -0.010766868f : 
                        -0.018455787f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.765385f ? 
                        2.848101E-4f : 
                        -0.010330807f))) : 
             (data[6 /* pickup_hour */] <7.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <2.5f ? 
                        0.0063134218f : 
                        -0.005057677f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.018678179f : 
                        -0.015342459f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.020589221f : 
                        0.0027805245f) : 
                     (data[5 /* pickup_weekday */] <1.5f ? 
                        -0.0023921719f : 
                        0.0075156577f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_22 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_22_class_0.score0(fdata);
  }
}
class gbm_model_Tree_22_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.014901572f ? 
         (data[10 /* log_euclidean_distance */] <0.007392577f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <2683.8022f ? 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95138f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.010740441f : 
                        -0.020877793f) : 
                     (data[2 /* pickup_latitude */] <40.651226f ? 
                        -0.05580711f : 
                        -0.022979341f)) : 
                 (data[9 /* log_haversine_distance */] <0.24204841f ? 
                     (data[12 /* total_distance */] <5466.581f ? 
                        -0.19875666f : 
                        -0.102180645f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95657f ? 
                        -0.099136695f : 
                        -1.742572E-4f))) : 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                 (data[5 /* pickup_weekday */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                        -0.00882187f : 
                        -0.020723278f) : 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        -0.010098483f : 
                        -0.0013193663f)) : 
                 (data[6 /* pickup_hour */] <2.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.74385f ? 
                        0.010572692f : 
                        -0.014044354f) : 
                     (data[6 /* pickup_hour */] <10.5f ? 
                        -0.027372355f : 
                        -0.013518878f)))) : 
         (data[12 /* total_distance */] <3731.341f ? 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.76922f ? 
                 (data[4 /* dropoff_latitude */] <40.74655f ? 
                     (data[8 /* lon_diff */] <-0.012877703f ? 
                        0.0058842525f : 
                        -0.004435408f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.008343992f : 
                        -0.0044046477f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.019264694f : 
                        -7.442226E-4f) : 
                     (data[3 /* dropoff_longitude */] <-73.97964f ? 
                        -0.0022947157f : 
                        -0.013584702f))) : 
             (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <2.107752f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.87807f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        7.45129E-4f : 
                        0.007471995f) : 
                     (data[4 /* dropoff_latitude */] <40.67493f ? 
                        -0.03673464f : 
                        -0.013160878f)) : 
                 (data[6 /* pickup_hour */] <13.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.875595f ? 
                        0.012253781f : 
                        -5.1107776E-4f) : 
                     (data[6 /* pickup_hour */] <18.5f ? 
                        0.023460098f : 
                        0.0072640134f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_23 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_23_class_0.score0(fdata);
  }
}
class gbm_model_Tree_23_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.025957577f ? 
         (data[10 /* log_euclidean_distance */] <0.010798758f ? 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                 (data[6 /* pickup_hour */] <6.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <3.5f ? 
                        -0.012086292f : 
                        -0.033735383f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.0025909697f : 
                        -0.016821297f)) : 
                 (data[5 /* pickup_weekday */] <2.5f ? 
                     (data[4 /* dropoff_latitude */] <40.651558f ? 
                        -0.09019664f : 
                        -0.023000134f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.98196f ? 
                        -0.0059073637f : 
                        -0.019838596f))) : 
             (data[5 /* pickup_weekday */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.019370858f : 
                        -0.00343241f) : 
                     (data[6 /* pickup_hour */] <18.5f ? 
                        -0.010075582f : 
                        -0.01714588f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                        0.0054608495f : 
                        -0.0044648205f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.980965f ? 
                        -6.09979E-4f : 
                        -0.011340977f)))) : 
         (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
             (data[6 /* pickup_hour */] <6.5f ? 
                 (data[5 /* pickup_weekday */] <3.5f ? 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.05333171f ? 
                        -0.011247851f : 
                        -0.0017695054f) : 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.011790747f : 
                        -0.0019575253f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[5 /* pickup_weekday */] <0.5f ? 
                        0.005100393f : 
                        0.016148135f) : 
                     (data[6 /* pickup_hour */] <11.5f ? 
                        -0.014860553f : 
                        0.0059497715f))) : 
             (data[5 /* pickup_weekday */] <1.5f ? 
                 (data[8 /* lon_diff */] <-0.056530952f ? 
                     (data[2 /* pickup_latitude */] <40.716766f ? 
                        -0.005468438f : 
                        0.011042036f) : 
                     (data[5 /* pickup_weekday */] <0.5f ? 
                        -0.0095360335f : 
                        -0.0033717216f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.7675f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.96053f ? 
                        0.008998282f : 
                        -0.0012272889f) : 
                     (data[2 /* pickup_latitude */] <40.740303f ? 
                        0.008320365f : 
                        -0.0055753603f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_24 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_24_class_0.score0(fdata);
  }
}
class gbm_model_Tree_24_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <2064.146f ? 
         (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96602f ? 
             (data[3 /* dropoff_longitude */] <-73.99449f ? 
                 (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.74061f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.990845f ? 
                        -0.008256813f : 
                        0.00487314f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.989105f ? 
                        -0.020452023f : 
                        -0.004631306f)) : 
                 (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.776123f ? 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        -0.009457222f : 
                        0.0010787233f) : 
                     (data[12 /* total_distance */] <838.54065f ? 
                        -0.023470141f : 
                        -0.012626156f))) : 
             (data[7 /* lat_diff */] <-0.0022296906f ? 
                 (Double.isNaN(data[8]) || data[8 /* lon_diff */] <9.253025E-4f ? 
                     (data[12 /* total_distance */] <664.33435f ? 
                        -0.04909801f : 
                        -0.019555543f) : 
                     (data[4 /* dropoff_latitude */] <40.76541f ? 
                        -0.02235419f : 
                        4.2263803E-4f)) : 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95215f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <16.5f ? 
                        0.0017381128f : 
                        -0.011420805f) : 
                     (data[2 /* pickup_latitude */] <40.76775f ? 
                        -0.030152373f : 
                        -0.011296731f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <5606.005f ? 
             (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96805f ? 
                 (data[5 /* pickup_weekday */] <0.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                        -0.0019871597f : 
                        -0.0107657295f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.0058161714f : 
                        -3.6342267E-4f)) : 
                 (data[1 /* pickup_longitude */] <-73.97515f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                        0.0052995784f : 
                        -0.0047075753f) : 
                     (data[10 /* log_euclidean_distance */] <0.0037966436f ? 
                        -0.16144921f : 
                        -0.007585056f))) : 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <15872.156f ? 
                 (data[10 /* log_euclidean_distance */] <0.025003849f ? 
                     (data[10 /* log_euclidean_distance */] <0.005085704f ? 
                        -0.092682675f : 
                        -0.021253584f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.97916f ? 
                        0.009176225f : 
                        0.003860573f)) : 
                 (data[6 /* pickup_hour */] <13.5f ? 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.88775f ? 
                        0.014769414f : 
                        4.664755E-4f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.023291074f : 
                        0.00916409f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_25 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_25_class_0.score0(fdata);
  }
}
class gbm_model_Tree_25_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.014180528f ? 
         (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                 (data[6 /* pickup_hour */] <6.5f ? 
                     (data[9 /* log_haversine_distance */] <0.014856549f ? 
                        -0.067377016f : 
                        -0.020056276f) : 
                     (data[4 /* dropoff_latitude */] <40.743687f ? 
                        -0.008184138f : 
                        0.0023672867f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.981285f ? 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.008870653f : 
                        -0.007658571f) : 
                     (data[8 /* lon_diff */] <-0.008463383f ? 
                        -0.008801358f : 
                        -0.019714432f))) : 
             (data[5 /* pickup_weekday */] <2.5f ? 
                 (data[12 /* total_distance */] <1301.2375f ? 
                     (data[4 /* dropoff_latitude */] <40.728336f ? 
                        -0.012213744f : 
                        -0.02357126f) : 
                     (data[10 /* log_euclidean_distance */] <0.007976476f ? 
                        -0.02810204f : 
                        -0.013726302f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.98196f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        -2.4649882E-4f : 
                        -0.019354813f) : 
                     (data[8 /* lon_diff */] <-0.008477092f ? 
                        -0.0068594343f : 
                        -0.017288065f)))) : 
         (Double.isNaN(data[12]) || data[12 /* total_distance */] <5319.1455f ? 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.776093f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <20.5f ? 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        -0.0023437613f : 
                        0.005029477f) : 
                     (data[5 /* pickup_weekday */] <2.5f ? 
                        -0.009280062f : 
                        -8.212664E-4f)) : 
                 (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.0059934855f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.009949207f ? 
                        -0.011139772f : 
                        0.004360979f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.0019394159f ? 
                        0.0030098085f : 
                        -0.01052453f))) : 
             (data[6 /* pickup_hour */] <7.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.0065735434f : 
                        -0.003196715f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.015230499f : 
                        -0.013442132f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.015485378f : 
                        0.0016590088f) : 
                     (data[5 /* pickup_weekday */] <1.5f ? 
                        -0.0024866678f : 
                        0.005850365f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_26 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_26_class_0.score0(fdata);
  }
}
class gbm_model_Tree_26_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.027399665f ? 
         (data[10 /* log_euclidean_distance */] <0.00936512f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <2569.2468f ? 
                 (data[12 /* total_distance */] <582.095f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <1.9073486E-6f ? 
                        -0.009381796f : 
                        -0.023677226f) : 
                     (data[9 /* log_haversine_distance */] <0.011186234f ? 
                        -0.07626115f : 
                        -0.0066544213f)) : 
                 (data[10 /* log_euclidean_distance */] <0.002487597f ? 
                     (data[12 /* total_distance */] <5509.7124f ? 
                        -0.16980389f : 
                        -0.08025423f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95657f ? 
                        -0.06443386f : 
                        -8.375131E-4f))) : 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.013358912f : 
                        0.0055153887f) : 
                     (data[6 /* pickup_hour */] <2.5f ? 
                        0.0063591693f : 
                        -0.00855358f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.97894f ? 
                     (data[5 /* pickup_weekday */] <2.5f ? 
                        -0.007197534f : 
                        0.002506543f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.97244f ? 
                        -0.005501384f : 
                        -0.014154009f)))) : 
         (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.76965f ? 
             (data[3 /* dropoff_longitude */] <-74.00969f ? 
                 (data[4 /* dropoff_latitude */] <40.7031f ? 
                     (data[4 /* dropoff_latitude */] <40.685966f ? 
                        6.6055835E-4f : 
                        -0.023673171f) : 
                     (data[1 /* pickup_longitude */] <-73.995674f ? 
                        -0.016291229f : 
                        0.0017184002f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[5 /* pickup_weekday */] <0.5f ? 
                        0.0011790829f : 
                        0.009243575f) : 
                     (data[6 /* pickup_hour */] <3.5f ? 
                        0.010176483f : 
                        -0.0012271841f))) : 
             (data[2 /* pickup_latitude */] <40.741886f ? 
                 (data[3 /* dropoff_longitude */] <-73.95679f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                        0.016195863f : 
                        0.007931039f) : 
                     (data[1 /* pickup_longitude */] <-73.99161f ? 
                        0.009883795f : 
                        -0.004644695f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.008464137f : 
                        0.0039704153f) : 
                     (data[8 /* lon_diff */] <-0.041711092f ? 
                        0.0031419832f : 
                        -0.008166179f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_27 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_27_class_0.score0(fdata);
  }
}
class gbm_model_Tree_27_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <1786.2803f ? 
         (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96602f ? 
             (data[3 /* dropoff_longitude */] <-73.99449f ? 
                 (data[4 /* dropoff_latitude */] <40.730457f ? 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-74.00225f ? 
                        -0.0064151944f : 
                        0.0037007488f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.0027433634f ? 
                        -0.010118324f : 
                        -0.020936083f)) : 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.7761f ? 
                     (data[4 /* dropoff_latitude */] <40.746605f ? 
                        -0.006534792f : 
                        0.002121507f) : 
                     (data[9 /* log_haversine_distance */] <0.16005176f ? 
                        0.016533498f : 
                        -0.013871536f))) : 
             (data[7 /* lat_diff */] <-0.0025084615f ? 
                 (Double.isNaN(data[8]) || data[8 /* lon_diff */] <6.866455E-5f ? 
                     (data[12 /* total_distance */] <636.825f ? 
                        -0.048000686f : 
                        -0.018895317f) : 
                     (data[4 /* dropoff_latitude */] <40.766823f ? 
                        -0.018769536f : 
                        -2.4969786E-4f)) : 
                 (data[4 /* dropoff_latitude */] <40.755676f ? 
                     (data[4 /* dropoff_latitude */] <40.656044f ? 
                        -0.044471845f : 
                        -0.01733851f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.0014921388f : 
                        -0.0131663f)))) : 
         (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.0466275f ? 
             (data[5 /* pickup_weekday */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.013044471f : 
                        -0.0010197426f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <22.5f ? 
                        -0.009210717f : 
                        -0.017283937f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                        0.0063666487f : 
                        -0.0012457004f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.98136f ? 
                        0.0013699455f : 
                        -0.0062003005f))) : 
             (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.20325737f ? 
                 (data[4 /* dropoff_latitude */] <40.70047f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95913f ? 
                        0.013836494f : 
                        0.003383457f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        0.0061111334f : 
                        2.8613652E-4f)) : 
                 (data[6 /* pickup_hour */] <4.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.0015569373f : 
                        0.014609947f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.019091872f : 
                        0.010127798f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_28 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_28_class_0.score0(fdata);
  }
}
class gbm_model_Tree_28_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[12]) || data[12 /* total_distance */] <3612.2556f ? 
         (data[10 /* log_euclidean_distance */] <0.008652526f ? 
             (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.005591035f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <1659.9281f ? 
                     (data[12 /* total_distance */] <155.61826f ? 
                        -0.018166563f : 
                        -0.0070883776f) : 
                     (data[10 /* log_euclidean_distance */] <0.0017575426f ? 
                        -0.11558723f : 
                        -0.022603286f)) : 
                 (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.0020366907f ? 
                     (data[1 /* pickup_longitude */] <-73.9901f ? 
                        -0.004599587f : 
                        0.0063710217f) : 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        -0.01617838f : 
                        -0.0036792138f))) : 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.766884f ? 
                 (data[4 /* dropoff_latitude */] <40.747784f ? 
                     (data[8 /* lon_diff */] <-0.009598255f ? 
                        0.003644207f : 
                        -0.0056328014f) : 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.008266587f : 
                        0.0059383987f)) : 
                 (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.0037810802f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.005913615f ? 
                        -0.011850335f : 
                        0.0018884293f) : 
                     (data[2 /* pickup_latitude */] <40.7756f ? 
                        0.005466256f : 
                        -0.0072130985f)))) : 
         (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
             (data[6 /* pickup_hour */] <6.0f ? 
                 (data[5 /* pickup_weekday */] <3.5f ? 
                     (data[8 /* lon_diff */] <-0.04852259f ? 
                        -9.6543645E-4f : 
                        -0.01021646f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <1.5f ? 
                        0.009573672f : 
                        -0.002586653f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.010518546f : 
                        -0.0018698104f) : 
                     (data[5 /* pickup_weekday */] <2.5f ? 
                        -0.002471854f : 
                        0.0059151617f))) : 
             (data[6 /* pickup_hour */] <2.5f ? 
                 (data[4 /* dropoff_latitude */] <40.73143f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.010068417f ? 
                        0.017649489f : 
                        0.0048927455f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.741486f ? 
                        0.008039266f : 
                        -0.0010830194f)) : 
                 (data[6 /* pickup_hour */] <11.5f ? 
                     (data[6 /* pickup_hour */] <5.5f ? 
                        -4.5699495E-4f : 
                        -0.015229996f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <21.5f ? 
                        0.0028106149f : 
                        -0.0099291485f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_29 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_29_class_0.score0(fdata);
  }
}
class gbm_model_Tree_29_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.013459484f ? 
         (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.0077156723f ? 
             (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.97153f ? 
                 (data[3 /* dropoff_longitude */] <-73.99369f ? 
                     (data[4 /* dropoff_latitude */] <40.725384f ? 
                        -5.6382717E-4f : 
                        -0.012819784f) : 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        -0.009171673f : 
                        -6.666422E-4f)) : 
                 (data[4 /* dropoff_latitude */] <40.755676f ? 
                     (data[8 /* lon_diff */] <-9.124279E-4f ? 
                        -0.010870543f : 
                        -0.026573297f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.0053959563f : 
                        -0.016598133f))) : 
             (data[1 /* pickup_longitude */] <-73.98865f ? 
                 (data[2 /* pickup_latitude */] <40.73542f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.990715f ? 
                        -3.4855264E-5f : 
                        0.010642762f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.0024838448f ? 
                        -0.008619411f : 
                        -0.0221499f)) : 
                 (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.006080389f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.765602f ? 
                        0.0101813115f : 
                        3.2317254E-4f) : 
                     (data[4 /* dropoff_latitude */] <40.74723f ? 
                        -0.015546159f : 
                        -0.002070303f)))) : 
         (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.05799145f ? 
             (data[5 /* pickup_weekday */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.011402451f : 
                        -8.792754E-4f) : 
                     (data[6 /* pickup_hour */] <18.5f ? 
                        -0.004251353f : 
                        -0.010064174f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.005335555f : 
                        0.004889274f) : 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.00833223f : 
                        -0.002894635f))) : 
             (data[6 /* pickup_hour */] <13.5f ? 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.875595f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.832813f ? 
                        0.0067489767f : 
                        -0.01134447f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.97521f ? 
                        3.473524E-5f : 
                        -0.011964029f)) : 
                 (data[6 /* pickup_hour */] <17.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.019215668f : 
                        0.008789064f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95788f ? 
                        0.008556634f : 
                        -6.342383E-4f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_30 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_30_class_0.score0(fdata);
  }
}
class gbm_model_Tree_30_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.02211201f ? 
         (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <20.5f ? 
             (data[6 /* pickup_hour */] <8.5f ? 
                 (data[4 /* dropoff_latitude */] <40.729984f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <2.5f ? 
                        0.010754776f : 
                        -0.0065563503f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.011363246f : 
                        -0.0037918764f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <15.5f ? 
                        0.0063778665f : 
                        -0.004028623f) : 
                     (data[6 /* pickup_hour */] <11.5f ? 
                        -0.018213103f : 
                        -0.0020210962f))) : 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
                 (data[12 /* total_distance */] <1684.625f ? 
                     (data[12 /* total_distance */] <52.64453f ? 
                        0.0031294203f : 
                        -0.016811885f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <22.5f ? 
                        -0.0065554366f : 
                        -0.014215771f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.980515f ? 
                        0.0047837743f : 
                        -0.009695748f) : 
                     (data[8 /* lon_diff */] <-0.011894822f ? 
                        -0.009866544f : 
                        -0.019556964f)))) : 
         (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.767498f ? 
             (data[3 /* dropoff_longitude */] <-74.00461f ? 
                 (data[1 /* pickup_longitude */] <-73.995316f ? 
                     (data[1 /* pickup_longitude */] <-74.00973f ? 
                        -0.0298384f : 
                        -0.011507622f) : 
                     (data[4 /* dropoff_latitude */] <40.70733f ? 
                        -0.009577116f : 
                        0.0040865145f)) : 
                 (data[2 /* pickup_latitude */] <40.7213f ? 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.14080459f ? 
                        -0.0018332705f : 
                        0.010888307f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.9569f ? 
                        0.00785157f : 
                        -2.648494E-4f))) : 
             (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.75989f ? 
                 (data[3 /* dropoff_longitude */] <-73.957054f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.005031824f ? 
                        0.0041744392f : 
                        0.014870921f) : 
                     (data[1 /* pickup_longitude */] <-73.987976f ? 
                        0.0066090403f : 
                        -0.0067039607f)) : 
                 (data[7 /* lat_diff */] <-0.017455757f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.0058968067f ? 
                        -0.010440063f : 
                        0.0020197572f) : 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.09505016f ? 
                        -9.461799E-4f : 
                        0.011514365f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_31 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_31_class_0.score0(fdata);
  }
}
class gbm_model_Tree_31_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[10 /* log_euclidean_distance */] <0.012978788f ? 
         (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                 (data[6 /* pickup_hour */] <6.5f ? 
                     (data[12 /* total_distance */] <151.36719f ? 
                        -0.05056171f : 
                        -0.014574993f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <15.5f ? 
                        0.0029814388f : 
                        -0.004792215f)) : 
                 (data[3 /* dropoff_longitude */] <-73.98329f ? 
                     (data[6 /* pickup_hour */] <1.5f ? 
                        0.010926974f : 
                        -0.0043422924f) : 
                     (data[6 /* pickup_hour */] <12.5f ? 
                        -0.016348965f : 
                        -0.009083017f))) : 
             (data[4 /* dropoff_latitude */] <40.732555f ? 
                 (data[4 /* dropoff_latitude */] <40.651386f ? 
                     (data[3 /* dropoff_longitude */] <-73.78787f ? 
                        -0.0960865f : 
                        -0.023962023f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
                        -0.005881063f : 
                        0.00699769f)) : 
                 (data[5 /* pickup_weekday */] <1.5f ? 
                     (data[2 /* pickup_latitude */] <40.754253f ? 
                        -0.02127056f : 
                        -0.013790781f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.761528f ? 
                        -0.006950283f : 
                        -0.012911216f)))) : 
         (data[5 /* pickup_weekday */] <0.5f ? 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                 (data[6 /* pickup_hour */] <6.5f ? 
                     (data[4 /* dropoff_latitude */] <40.726315f ? 
                        -0.0026384029f : 
                        -0.0109018665f) : 
                     (data[4 /* dropoff_latitude */] <40.74693f ? 
                        -0.0047543286f : 
                        0.002505035f)) : 
                 (data[12 /* total_distance */] <3572.8093f ? 
                     (data[6 /* pickup_hour */] <18.5f ? 
                        -0.0050805635f : 
                        -0.010975593f) : 
                     (data[1 /* pickup_longitude */] <-74.00577f ? 
                        -0.012855544f : 
                        -0.0043703895f))) : 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                 (data[6 /* pickup_hour */] <8.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.0034516281f : 
                        0.0022715349f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.0071112863f : 
                        1.7786864E-4f)) : 
                 (data[6 /* pickup_hour */] <3.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.75033f ? 
                        0.009840562f : 
                        -0.0015454427f) : 
                     (data[6 /* pickup_hour */] <10.5f ? 
                        -0.016139561f : 
                        -0.0016782046f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_32 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_32_class_0.score0(fdata);
  }
}
class gbm_model_Tree_32_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.029082099f ? 
         (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96805f ? 
             (data[3 /* dropoff_longitude */] <-73.994644f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.99017f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.742714f ? 
                        -0.00537766f : 
                        -0.015116175f) : 
                     (data[7 /* lat_diff */] <0.0036814213f ? 
                        0.0075474535f : 
                        -0.004409751f)) : 
                 (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.776108f ? 
                     (data[4 /* dropoff_latitude */] <40.745758f ? 
                        -0.0021455004f : 
                        0.003999029f) : 
                     (data[4 /* dropoff_latitude */] <40.76603f ? 
                        0.0011867543f : 
                        -0.010079985f))) : 
             (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.0023031533f ? 
                 (data[8 /* lon_diff */] <-0.017982781f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <16.5f ? 
                        0.004329398f : 
                        -0.0032487297f) : 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.0010245563f ? 
                        -0.012664484f : 
                        -0.0012716686f)) : 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.952736f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <16.5f ? 
                        0.004873683f : 
                        -0.0042243097f) : 
                     (data[4 /* dropoff_latitude */] <40.767666f ? 
                        -0.017169986f : 
                        -0.0051652035f)))) : 
         (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.76793f ? 
             (data[3 /* dropoff_longitude */] <-74.00969f ? 
                 (data[4 /* dropoff_latitude */] <40.703274f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <12093.847f ? 
                        -0.021432087f : 
                        0.0018743806f) : 
                     (data[1 /* pickup_longitude */] <-73.995674f ? 
                        -0.01393746f : 
                        -6.023667E-6f)) : 
                 (data[2 /* pickup_latitude */] <40.7213f ? 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.1406461f ? 
                        -0.0014243034f : 
                        0.010006396f) : 
                     (data[1 /* pickup_longitude */] <-73.97712f ? 
                        0.009858176f : 
                        0.0028050528f))) : 
             (data[1 /* pickup_longitude */] <-73.99026f ? 
                 (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.759106f ? 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        4.250154E-5f : 
                        0.008322931f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.02356571f ? 
                        -0.018188702f : 
                        0.0037761068f)) : 
                 (data[3 /* dropoff_longitude */] <-73.9691f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.013178706f ? 
                        0.009559788f : 
                        -0.013137117f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -9.690603E-4f : 
                        -0.0073599243f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_33 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_33_class_0.score0(fdata);
  }
}
class gbm_model_Tree_33_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.028841753f ? 
         (data[5 /* pickup_weekday */] <0.5f ? 
             (data[4 /* dropoff_latitude */] <40.745464f ? 
                 (data[4 /* dropoff_latitude */] <40.724655f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.980896f ? 
                        -0.003051832f : 
                        -0.015373287f) : 
                     (data[12 /* total_distance */] <200.3f ? 
                        -0.058952715f : 
                        -0.013566454f)) : 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.016305506f : 
                        -0.0014034814f) : 
                     (data[1 /* pickup_longitude */] <-73.99476f ? 
                        -0.022923922f : 
                        -0.008472012f))) : 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.766884f ? 
                 (data[4 /* dropoff_latitude */] <40.746662f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.9816f ? 
                        -3.7193848E-4f : 
                        -0.009880341f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.0059907846f : 
                        -0.004231372f)) : 
                 (data[9 /* log_haversine_distance */] <0.15833557f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <196.15625f ? 
                        0.0069438587f : 
                        0.058559094f) : 
                     (data[12 /* total_distance */] <784.625f ? 
                        -0.018018683f : 
                        -0.0036135875f)))) : 
         (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <20.5f ? 
             (data[6 /* pickup_hour */] <6.5f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <0.5f ? 
                        5.2207825E-4f : 
                        -0.0074726455f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <4.5f ? 
                        0.0049682995f : 
                        -0.011343203f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <17.5f ? 
                        0.009853889f : 
                        0.0022105726f) : 
                     (data[6 /* pickup_hour */] <10.5f ? 
                        -0.015953697f : 
                        0.002959607f))) : 
             (data[8 /* lon_diff */] <-0.045059323f ? 
                 (data[2 /* pickup_latitude */] <40.721466f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.013071656f ? 
                        -0.0051549184f : 
                        0.008951611f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.9443f ? 
                        0.011585971f : 
                        -0.02516799f)) : 
                 (data[5 /* pickup_weekday */] <2.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <22.5f ? 
                        -0.003514851f : 
                        -0.01096573f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        0.0025087069f : 
                        -0.00885628f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_34 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_34_class_0.score0(fdata);
  }
}
class gbm_model_Tree_34_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <1746.5852f ? 
         (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.009634763f ? 
             (data[8 /* lon_diff */] <-0.010140562f ? 
                 (data[7 /* lat_diff */] <-0.0041660666f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.0017277688f : 
                        -0.013498959f) : 
                     (data[2 /* pickup_latitude */] <40.70937f ? 
                        -0.018202348f : 
                        0.0066385083f)) : 
                 (Double.isNaN(data[11]) || data[11 /* log_manhattan_distance */] <0.016686467f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <19.5f ? 
                        -0.0027955829f : 
                        -0.008674041f) : 
                     (data[9 /* log_haversine_distance */] <0.8067683f ? 
                        -0.0031738651f : 
                        -0.0149345035f))) : 
             (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.0068311393f ? 
                 (data[3 /* dropoff_longitude */] <-73.995186f ? 
                     (data[2 /* pickup_latitude */] <40.732788f ? 
                        0.0061220597f : 
                        -0.004123307f) : 
                     (data[4 /* dropoff_latitude */] <40.73789f ? 
                        -0.00751037f : 
                        0.011376062f)) : 
                 (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.009487826f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.815243f ? 
                        -0.0037116967f : 
                        0.055903137f) : 
                     (data[4 /* dropoff_latitude */] <40.747105f ? 
                        -0.025816578f : 
                        -0.008557745f)))) : 
         (data[9 /* log_haversine_distance */] <0.71736866f ? 
             (data[9 /* log_haversine_distance */] <0.23707181f ? 
                 (data[4 /* dropoff_latitude */] <40.750637f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <3.361702E-4f ? 
                        -0.1512036f : 
                        -0.018907761f) : 
                     (data[1 /* pickup_longitude */] <-73.951225f ? 
                        0.020093815f : 
                        -0.08322184f)) : 
                 (data[10 /* log_euclidean_distance */] <0.008022461f ? 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.954094f ? 
                        -0.029598717f : 
                        -4.602008E-4f) : 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <2152.6921f ? 
                        -0.0073534767f : 
                        -0.022132147f))) : 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <20.5f ? 
                 (data[6 /* pickup_hour */] <9.5f ? 
                     (data[6 /* pickup_hour */] <0.5f ? 
                        0.0052960343f : 
                        -0.0018517284f) : 
                     (data[5 /* pickup_weekday */] <0.5f ? 
                        -0.0022448648f : 
                        0.0045958096f)) : 
                 (data[5 /* pickup_weekday */] <2.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <22.5f ? 
                        -0.0036932623f : 
                        -0.009690903f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        0.0019050634f : 
                        -0.0091851f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_35 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_35_class_0.score0(fdata);
  }
}
class gbm_model_Tree_35_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <3651.9507f ? 
         (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <20.5f ? 
             (data[6 /* pickup_hour */] <8.5f ? 
                 (data[4 /* dropoff_latitude */] <40.733467f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <3.5f ? 
                        0.008893539f : 
                        -0.0076330923f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                        -0.009345362f : 
                        -0.002730119f)) : 
                 (data[4 /* dropoff_latitude */] <40.745464f ? 
                     (data[8 /* lon_diff */] <-0.005874634f ? 
                        0.0027779276f : 
                        -0.0059805517f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.765064f ? 
                        0.0066566872f : 
                        -0.0025465298f))) : 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <22.5f ? 
                     (data[12 /* total_distance */] <1198.2797f ? 
                        -0.013973877f : 
                        -0.0057325005f) : 
                     (data[12 /* total_distance */] <57.060936f ? 
                        0.031649526f : 
                        -0.014545554f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.761074f ? 
                        0.004849624f : 
                        -0.008259842f) : 
                     (data[6 /* pickup_hour */] <21.5f ? 
                        -0.00998473f : 
                        -0.016719487f)))) : 
         (data[10 /* log_euclidean_distance */] <0.014901572f ? 
             (data[10 /* log_euclidean_distance */] <0.0049534854f ? 
                 (data[12 /* total_distance */] <4391.7686f ? 
                     (data[6 /* pickup_hour */] <10.5f ? 
                        -0.1267052f : 
                        -0.18699859f) : 
                     (data[12 /* total_distance */] <6554.5347f ? 
                        -0.075203f : 
                        0.00950267f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96786f ? 
                     (data[10 /* log_euclidean_distance */] <0.0080664735f ? 
                        -0.074417554f : 
                        -0.0364357f) : 
                     (data[11 /* log_manhattan_distance */] <0.008980367f ? 
                        0.05550614f : 
                        -9.160394E-4f))) : 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.773514f ? 
                 (data[3 /* dropoff_longitude */] <-74.00969f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.081600666f ? 
                        -0.005347325f : 
                        0.012844762f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.9569f ? 
                        0.004971243f : 
                        8.757655E-4f)) : 
                 (data[2 /* pickup_latitude */] <40.752174f ? 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95478f ? 
                        0.0065246117f : 
                        -0.0010991733f) : 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.101215966f ? 
                        -0.003397452f : 
                        0.0064855525f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_36 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_36_class_0.score0(fdata);
  }
}
class gbm_model_Tree_36_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <1746.5852f ? 
         (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.009634763f ? 
             (data[8 /* lon_diff */] <-0.010140562f ? 
                 (data[7 /* lat_diff */] <-0.0041660666f ? 
                     (data[7 /* lat_diff */] <-0.009956344f ? 
                        -0.015209622f : 
                        -0.0021091145f) : 
                     (data[2 /* pickup_latitude */] <40.70937f ? 
                        -0.016404694f : 
                        0.0059340023f)) : 
                 (Double.isNaN(data[11]) || data[11 /* log_manhattan_distance */] <0.016487818f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.0068484545f ? 
                        -0.003986738f : 
                        0.002898547f) : 
                     (data[12 /* total_distance */] <1391.7422f ? 
                        -0.019009741f : 
                        -0.009695905f))) : 
             (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.0068311393f ? 
                 (data[3 /* dropoff_longitude */] <-73.995186f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.73928f ? 
                        0.0037639446f : 
                        -0.005306906f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.97624f ? 
                        0.012406122f : 
                        0.001817608f)) : 
                 (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.009487826f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.92033f ? 
                        -0.0032406813f : 
                        0.054295983f) : 
                     (data[4 /* dropoff_latitude */] <40.747105f ? 
                        -0.022756413f : 
                        -0.007736689f)))) : 
         (data[9 /* log_haversine_distance */] <0.7238902f ? 
             (data[10 /* log_euclidean_distance */] <0.0057720756f ? 
                 (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.75551f ? 
                     (data[10 /* log_euclidean_distance */] <9.391618E-5f ? 
                        -0.117177404f : 
                        -0.059718147f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.765587f ? 
                        0.0023347402f : 
                        -0.054258175f)) : 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <2355.7383f ? 
                     (data[9 /* log_haversine_distance */] <0.6426388f ? 
                        -0.015644133f : 
                        -0.005737386f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.954094f ? 
                        -0.028907787f : 
                        0.0013721623f))) : 
             (data[5 /* pickup_weekday */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.006973843f : 
                        1.58401E-4f) : 
                     (data[1 /* pickup_longitude */] <-74.00178f ? 
                        -0.0103473365f : 
                        -0.00478143f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        -9.218922E-4f : 
                        0.0035484296f) : 
                     (data[6 /* pickup_hour */] <4.5f ? 
                        0.0038133299f : 
                        -0.0039045643f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_37 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_37_class_0.score0(fdata);
  }
}
class gbm_model_Tree_37_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <4882.4995f ? 
         (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.9716f ? 
             (data[3 /* dropoff_longitude */] <-73.99462f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.99054f ? 
                     (data[4 /* dropoff_latitude */] <40.73042f ? 
                        -0.0023464966f : 
                        -0.010575335f) : 
                     (data[7 /* lat_diff */] <0.002323866f ? 
                        0.0076398677f : 
                        -0.0010544581f)) : 
                 (data[6 /* pickup_hour */] <8.5f ? 
                     (data[4 /* dropoff_latitude */] <40.72993f ? 
                        0.0089896815f : 
                        -0.0047557214f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.004780029f : 
                        -0.0012047973f))) : 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (data[6 /* pickup_hour */] <6.5f ? 
                        -0.013663575f : 
                        0.002856334f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.798588f ? 
                        -0.009337623f : 
                        0.0023242075f)) : 
                 (data[1 /* pickup_longitude */] <-73.97853f ? 
                     (data[2 /* pickup_latitude */] <40.72346f ? 
                        -0.023422718f : 
                        -0.0021155179f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.795242f ? 
                        -0.011016221f : 
                        0.0013247264f)))) : 
         (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.117103845f ? 
             (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.97715f ? 
                 (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.023628712f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.75269f ? 
                        0.0020817928f : 
                        -0.006574573f) : 
                     (data[3 /* dropoff_longitude */] <-74.001564f ? 
                        -0.001596246f : 
                        0.0098522175f)) : 
                 (data[4 /* dropoff_latitude */] <40.71594f ? 
                     (data[8 /* lon_diff */] <0.011172414f ? 
                        0.0028707837f : 
                        -0.011501358f) : 
                     (data[3 /* dropoff_longitude */] <-73.98932f ? 
                        0.009445337f : 
                        -0.0021073436f))) : 
             (data[6 /* pickup_hour */] <3.5f ? 
                 (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <3.0486891f ? 
                     (data[4 /* dropoff_latitude */] <40.692978f ? 
                        -0.0015711929f : 
                        -0.016989995f) : 
                     (data[10 /* log_euclidean_distance */] <0.1923893f ? 
                        0.060051262f : 
                        -0.002081451f)) : 
                 (data[6 /* pickup_hour */] <8.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.02998622f : 
                        -0.012766189f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.010020434f : 
                        0.0034739815f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_38 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_38_class_0.score0(fdata);
  }
}
class gbm_model_Tree_38_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[5 /* pickup_weekday */] <0.5f ? 
         (data[12 /* total_distance */] <1984.7559f ? 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <15.5f ? 
                 (data[6 /* pickup_hour */] <6.5f ? 
                     (data[9 /* log_haversine_distance */] <0.05123061f ? 
                        -0.072932586f : 
                        -0.012611811f) : 
                     (data[4 /* dropoff_latitude */] <40.74134f ? 
                        -0.009621791f : 
                        -0.0020725082f)) : 
                 (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.0125594735f ? 
                     (data[4 /* dropoff_latitude */] <40.75404f ? 
                        -0.013468804f : 
                        -0.008584108f) : 
                     (data[1 /* pickup_longitude */] <-73.98321f ? 
                        -0.0073342193f : 
                        0.0044501354f))) : 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                 (data[6 /* pickup_hour */] <6.5f ? 
                     (data[4 /* dropoff_latitude */] <40.726315f ? 
                        -0.0022010123f : 
                        -0.007566128f) : 
                     (data[4 /* dropoff_latitude */] <40.74693f ? 
                        -0.0037592493f : 
                        0.002085843f)) : 
                 (data[1 /* pickup_longitude */] <-74.00178f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <-0.011992097f ? 
                        -0.014732671f : 
                        -0.0013550319f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.96983f ? 
                        -0.0028714177f : 
                        -0.007257858f)))) : 
         (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.77695f ? 
                 (data[6 /* pickup_hour */] <8.5f ? 
                     (data[6 /* pickup_hour */] <0.5f ? 
                        0.0059740357f : 
                        -0.002923585f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.0050919377f : 
                        -1.9305153E-4f)) : 
                 (data[2 /* pickup_latitude */] <40.75914f ? 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        -0.0028538401f : 
                        0.005143002f) : 
                     (data[9 /* log_haversine_distance */] <0.20868906f ? 
                        0.015439039f : 
                        -0.0047601103f))) : 
             (data[6 /* pickup_hour */] <4.5f ? 
                 (data[4 /* dropoff_latitude */] <40.743458f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <1.5f ? 
                        0.012727208f : 
                        0.0045817886f) : 
                     (data[8 /* lon_diff */] <-0.045279264f ? 
                        0.0077893003f : 
                        -0.00325335f)) : 
                 (data[6 /* pickup_hour */] <10.5f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <3348.9937f ? 
                        -0.020126691f : 
                        -0.013497648f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <21.5f ? 
                        -0.0017146892f : 
                        -0.011175523f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_39 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_39_class_0.score0(fdata);
  }
}
class gbm_model_Tree_39_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <1230.5486f ? 
         (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <0.6912825f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <975.74805f ? 
                 (data[7 /* lat_diff */] <-0.005161971f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.0032744408f ? 
                        -0.020800313f : 
                        -0.0053970786f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.0045588366f ? 
                        -0.0023736982f : 
                        -0.011446625f)) : 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.79322f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.764263f ? 
                        0.0023911824f : 
                        -0.0019436689f) : 
                     (data[6 /* pickup_hour */] <10.5f ? 
                        0.037275083f : 
                        -0.11676412f))) : 
             (data[8 /* lon_diff */] <-0.008270353f ? 
                 (data[2 /* pickup_latitude */] <40.72349f ? 
                     (data[12 /* total_distance */] <1075.5742f ? 
                        -0.05571488f : 
                        -0.022059586f) : 
                     (data[1 /* pickup_longitude */] <-74.003235f ? 
                        -0.008147002f : 
                        0.0057380022f)) : 
                 (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.008403754f ? 
                     (data[4 /* dropoff_latitude */] <40.745167f ? 
                        -0.025096811f : 
                        -0.015814608f) : 
                     (data[3 /* dropoff_longitude */] <-73.996956f ? 
                        -0.008257671f : 
                        0.0047806976f)))) : 
         (data[10 /* log_euclidean_distance */] <0.006729742f ? 
             (data[9 /* log_haversine_distance */] <0.039548315f ? 
                 (Double.isNaN(data[0]) || data[0 /* C1 */] <1236096.5f ? 
                     (data[5 /* pickup_weekday */] <2.5f ? 
                        -0.07372791f : 
                        -0.1297452f) : 
                    -0.011509225f) : 
                 (data[10 /* log_euclidean_distance */] <0.0039972267f ? 
                     (data[4 /* dropoff_latitude */] <40.68654f ? 
                        -0.10391859f : 
                        -0.03058838f) : 
                     (data[2 /* pickup_latitude */] <40.647823f ? 
                        0.06493339f : 
                        -0.016474776f))) : 
             (data[5 /* pickup_weekday */] <0.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <16.5f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.08927703f ? 
                        -0.0018839386f : 
                        0.0070959027f) : 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <4993.6357f ? 
                        -0.0059505487f : 
                        -0.002422086f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                        0.0043679704f : 
                        -0.0012431797f) : 
                     (data[6 /* pickup_hour */] <2.5f ? 
                        0.0065890583f : 
                        -0.0022333404f)))));
    return pred;
  } // constant pool size = 122B, number of visited nodes = 30, static init size = 0B
}


class gbm_model_Forest_40 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_40_class_0.score0(fdata);
  }
}
class gbm_model_Tree_40_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.053837936f ? 
         (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95406f ? 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.784775f ? 
                 (data[3 /* dropoff_longitude */] <-74.00057f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.99083f ? 
                        -0.007058349f : 
                        0.0013257108f) : 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        -0.0027524456f : 
                        0.0019091824f)) : 
                 (data[9 /* log_haversine_distance */] <0.16904525f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <203.80782f ? 
                        0.001623068f : 
                        0.06685417f) : 
                     (data[12 /* total_distance */] <815.23126f ? 
                        -0.020658951f : 
                        -0.005607367f))) : 
             (data[4 /* dropoff_latitude */] <40.75817f ? 
                 (data[3 /* dropoff_longitude */] <-73.98196f ? 
                     (data[4 /* dropoff_latitude */] <40.74422f ? 
                        -0.011483659f : 
                        0.012596305f) : 
                     (data[6 /* pickup_hour */] <4.5f ? 
                        -0.0024375955f : 
                        -0.017128376f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.950645f ? 
                     (data[7 /* lat_diff */] <0.003318429f ? 
                        0.0041277353f : 
                        -0.005108414f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.797504f ? 
                        -0.011416868f : 
                        0.00436293f)))) : 
         (data[6 /* pickup_hour */] <13.5f ? 
             (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.87458f ? 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.08817851f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.03129959f ? 
                        0.0031315126f : 
                        -0.0043063997f) : 
                     (data[11 /* log_manhattan_distance */] <0.118939f ? 
                        0.013603f : 
                        0.0055360165f)) : 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.955215f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.755833f ? 
                        -0.008711761f : 
                        0.0017932212f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <8.5f ? 
                        -0.010784451f : 
                        -0.025317816f))) : 
             (data[6 /* pickup_hour */] <17.5f ? 
                 (data[1 /* pickup_longitude */] <-73.97578f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.018606206f : 
                        0.008265786f) : 
                     (data[6 /* pickup_hour */] <14.5f ? 
                        0.0023879532f : 
                        0.010039675f)) : 
                 (data[4 /* dropoff_latitude */] <40.700466f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.952385f ? 
                        0.011180469f : 
                        3.983179E-4f) : 
                     (data[8 /* lon_diff */] <-0.056530952f ? 
                        0.006798837f : 
                        -5.543475E-4f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_41 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_41_class_0.score0(fdata);
  }
}
class gbm_model_Tree_41_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <2699.268f ? 
         (data[8 /* lon_diff */] <-0.015313417f ? 
             (data[7 /* lat_diff */] <-0.008082956f ? 
                 (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <1.146491f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <15.5f ? 
                        0.0036568893f : 
                        -0.0019696055f) : 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.025154354f ? 
                        -0.005757258f : 
                        -0.018569168f)) : 
                 (data[4 /* dropoff_latitude */] <40.713745f ? 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.02816534f ? 
                        -0.011377135f : 
                        -0.056181315f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.760025f ? 
                        0.010963206f : 
                        0.004565564f))) : 
             (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.01483751f ? 
                 (Double.isNaN(data[11]) || data[11 /* log_manhattan_distance */] <0.024729816f ? 
                     (data[4 /* dropoff_latitude */] <40.72656f ? 
                        0.0031934723f : 
                        -0.0023379317f) : 
                     (data[9 /* log_haversine_distance */] <1.0613719f ? 
                        -0.0035711927f : 
                        -0.010459279f)) : 
                 (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.007878125f ? 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.98056f ? 
                        0.010188952f : 
                        0.001973449f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.015220993f ? 
                        3.0235014E-5f : 
                        -0.009314042f)))) : 
         (data[9 /* log_haversine_distance */] <0.91301465f ? 
             (data[11 /* log_manhattan_distance */] <0.007762131f ? 
                 (data[5 /* pickup_weekday */] <0.5f ? 
                     (data[9 /* log_haversine_distance */] <0.12356507f ? 
                        0.05743611f : 
                        -0.034776106f) : 
                     (data[12 /* total_distance */] <6075.2188f ? 
                        -0.072314255f : 
                        -0.015512268f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96683f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <3267.0767f ? 
                        -0.014771988f : 
                        -0.033962842f) : 
                     (data[11 /* log_manhattan_distance */] <0.008896078f ? 
                        0.056580614f : 
                        -0.007419964f))) : 
             (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.767498f ? 
                 (data[3 /* dropoff_longitude */] <-74.00359f ? 
                     (data[1 /* pickup_longitude */] <-74.00138f ? 
                        -0.014598534f : 
                        -7.990308E-5f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.9569f ? 
                        0.0039144806f : 
                        -2.5302553E-4f)) : 
                 (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.76932f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.005031824f ? 
                        -7.24594E-4f : 
                        0.0071099387f) : 
                     (data[7 /* lat_diff */] <-0.017455757f ? 
                        -0.0068307626f : 
                        -0.0017182935f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_42 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_42_class_0.score0(fdata);
  }
}
class gbm_model_Tree_42_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
         (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
             (data[6 /* pickup_hour */] <6.5f ? 
                 (data[6 /* pickup_hour */] <1.5f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.98111f ? 
                        6.048539E-4f : 
                        -0.008700006f) : 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.07271887f ? 
                        -0.012311197f : 
                        -0.0014175328f)) : 
                 (data[4 /* dropoff_latitude */] <40.745155f ? 
                     (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <1.5528002f ? 
                        -0.003816352f : 
                        0.004623057f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.76809f ? 
                        0.009052494f : 
                        0.0019347587f))) : 
             (data[6 /* pickup_hour */] <2.5f ? 
                 (data[4 /* dropoff_latitude */] <40.74348f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.97671f ? 
                        0.012862231f : 
                        9.1432105E-4f) : 
                     (data[8 /* lon_diff */] <-0.04903984f ? 
                        0.011723865f : 
                        -2.9607615E-4f)) : 
                 (data[6 /* pickup_hour */] <11.5f ? 
                     (data[6 /* pickup_hour */] <4.5f ? 
                        -9.809543E-4f : 
                        -0.014383729f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.9812f ? 
                        0.0029950049f : 
                        -0.0029153991f)))) : 
         (data[4 /* dropoff_latitude */] <40.730976f ? 
             (data[2 /* pickup_latitude */] <40.72063f ? 
                 (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.06801201f ? 
                     (data[2 /* pickup_latitude */] <40.69815f ? 
                        -0.013949736f : 
                        -0.004295347f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.89183f ? 
                        0.0077418773f : 
                        -0.0054509616f)) : 
                 (data[8 /* lon_diff */] <0.0026435852f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
                        0.006435691f : 
                        0.017817933f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
                        -0.004362125f : 
                        0.0047953064f))) : 
             (data[5 /* pickup_weekday */] <2.5f ? 
                 (data[12 /* total_distance */] <1782.6328f ? 
                     (data[1 /* pickup_longitude */] <-73.99406f ? 
                        -0.018208247f : 
                        -0.009069648f) : 
                     (data[1 /* pickup_longitude */] <-74.00197f ? 
                        -0.013103129f : 
                        -0.003896205f)) : 
                 (data[3 /* dropoff_longitude */] <-73.98125f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        0.003668079f : 
                        -0.007825949f) : 
                     (data[1 /* pickup_longitude */] <-73.98996f ? 
                        0.0034544102f : 
                        -0.006186791f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_43 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_43_class_0.score0(fdata);
  }
}
class gbm_model_Tree_43_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[5 /* pickup_weekday */] <0.5f ? 
         (data[12 /* total_distance */] <2143.5364f ? 
             (data[4 /* dropoff_latitude */] <40.746017f ? 
                 (data[4 /* dropoff_latitude */] <40.72433f ? 
                     (data[2 /* pickup_latitude */] <40.643883f ? 
                        -0.06254205f : 
                        -1.258255E-5f) : 
                     (data[12 /* total_distance */] <100.47656f ? 
                        -0.05502686f : 
                        -0.011143251f)) : 
                 (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.010750353f ? 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        -0.015640391f : 
                        -0.004793749f) : 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.011671126f ? 
                        0.0042038187f : 
                        -0.015242073f))) : 
             (data[1 /* pickup_longitude */] <-74.00477f ? 
                 (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.014353871f ? 
                     (data[2 /* pickup_latitude */] <40.714462f ? 
                        -0.008794787f : 
                        4.8702475E-4f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.73339f ? 
                        -0.007829902f : 
                        -0.024507038f)) : 
                 (data[6 /* pickup_hour */] <6.0f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.011817932f ? 
                        -0.004694899f : 
                        -0.010583833f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        3.4627822E-4f : 
                        -0.0039249035f)))) : 
         (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
             (data[6 /* pickup_hour */] <8.5f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <6.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <3.5f ? 
                        1.3603501E-4f : 
                        -0.010762642f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.003168267f : 
                        -0.0193322f)) : 
                 (data[6 /* pickup_hour */] <15.5f ? 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.0066760397f : 
                        -0.005577373f) : 
                     (data[12 /* total_distance */] <5347.8984f ? 
                        -0.001098048f : 
                        0.004050623f))) : 
             (data[6 /* pickup_hour */] <4.5f ? 
                 (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.75033f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.98074f ? 
                        0.008024929f : 
                        -1.4445586E-4f) : 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <7847.0156f ? 
                        -0.0054199505f : 
                        0.004044468f)) : 
                 (data[6 /* pickup_hour */] <10.5f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.77095f ? 
                        -0.0154469395f : 
                        -0.008923706f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <21.5f ? 
                        -0.0011417216f : 
                        -0.009648611f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_44 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_44_class_0.score0(fdata);
  }
}
class gbm_model_Tree_44_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <912.9877f ? 
         (data[7 /* lat_diff */] <-0.0054264367f ? 
             (data[10 /* log_euclidean_distance */] <0.006674076f ? 
                 (data[12 /* total_distance */] <724.025f ? 
                     (data[3 /* dropoff_longitude */] <-73.997215f ? 
                        -0.048549876f : 
                        -0.016809925f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                        -0.002352717f : 
                        -0.016817426f)) : 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.967094f ? 
                     (data[6 /* pickup_hour */] <7.5f ? 
                        -0.033545084f : 
                        -0.014302643f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <16.5f ? 
                        -0.023387123f : 
                        -0.040045347f))) : 
             (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.0043833544f ? 
                 (data[12 /* total_distance */] <549.1664f ? 
                     (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <0.34452513f ? 
                        -0.0058284625f : 
                        -0.020861197f) : 
                     (data[7 /* lat_diff */] <-0.003585577f ? 
                        -0.006283466f : 
                        0.0039984197f)) : 
                 (data[8 /* lon_diff */] <0.0030498505f ? 
                     (data[8 /* lon_diff */] <-3.0130148E-4f ? 
                        0.0055131456f : 
                        -0.0065332334f) : 
                     (data[2 /* pickup_latitude */] <40.75991f ? 
                        -0.030730084f : 
                        -0.014664228f)))) : 
         (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <22.5f ? 
             (data[5 /* pickup_weekday */] <0.5f ? 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <3085.9968f ? 
                     (data[4 /* dropoff_latitude */] <40.74693f ? 
                        -0.006982479f : 
                        -0.0025286218f) : 
                     (data[6 /* pickup_hour */] <5.5f ? 
                        -0.0056470614f : 
                        -3.8060002E-4f)) : 
                 (data[6 /* pickup_hour */] <10.5f ? 
                     (data[6 /* pickup_hour */] <0.5f ? 
                        0.0047420245f : 
                        -0.0016417403f) : 
                     (data[6 /* pickup_hour */] <16.5f ? 
                        0.0039817756f : 
                        4.200879E-4f))) : 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
                 (data[8 /* lon_diff */] <-0.044165254f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.9342f ? 
                        0.0044046235f : 
                        -0.03414852f) : 
                     (data[9 /* log_haversine_distance */] <0.25823325f ? 
                        -0.094428174f : 
                        -0.00959986f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                     (data[4 /* dropoff_latitude */] <40.72972f ? 
                        0.007922173f : 
                        -0.0012306075f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.968575f ? 
                        -0.013798709f : 
                        -0.0043600136f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_45 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_45_class_0.score0(fdata);
  }
}
class gbm_model_Tree_45_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <0.061048374f ? 
         (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.978714f ? 
             (data[3 /* dropoff_longitude */] <-73.99454f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.99054f ? 
                     (data[4 /* dropoff_latitude */] <40.730263f ? 
                        -0.0015031938f : 
                        -0.008542852f) : 
                     (data[4 /* dropoff_latitude */] <40.709698f ? 
                        -0.011877256f : 
                        0.002883109f)) : 
                 (data[4 /* dropoff_latitude */] <40.74382f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.9825f ? 
                        0.003266322f : 
                        -0.009506918f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.761574f ? 
                        0.0071941316f : 
                        -9.642448E-4f))) : 
             (data[1 /* pickup_longitude */] <-73.98952f ? 
                 (data[2 /* pickup_latitude */] <40.714615f ? 
                     (data[4 /* dropoff_latitude */] <40.711945f ? 
                        -5.731947E-4f : 
                        -0.020466588f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.78281f ? 
                        0.007451355f : 
                        -0.005878794f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.0f ? 
                        0.0012004107f : 
                        -0.004951471f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.798584f ? 
                        -0.0064410893f : 
                        0.0026742413f)))) : 
         (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.87461f ? 
             (data[8 /* lon_diff */] <-0.06616932f ? 
                 (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.04322481f ? 
                     (data[2 /* pickup_latitude */] <40.72235f ? 
                        0.003366229f : 
                        0.012887331f) : 
                     (data[12 /* total_distance */] <10738.646f ? 
                        0.012651409f : 
                        0.030012125f)) : 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <13851.002f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.83281f ? 
                        0.0020791814f : 
                        -0.012845836f) : 
                     (data[8 /* lon_diff */] <0.017946124f ? 
                        0.013850454f : 
                        0.00504676f))) : 
             (Double.isNaN(data[8]) || data[8 /* lon_diff */] <-0.1122275f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <13.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.755527f ? 
                        -0.005487991f : 
                        0.0026293306f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <17.5f ? 
                        0.013253581f : 
                        0.0031847435f)) : 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95431f ? 
                     (data[2 /* pickup_latitude */] <40.754448f ? 
                        -0.01907697f : 
                        6.921032E-4f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.767876f ? 
                        -0.00915925f : 
                        -0.018576825f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_46 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_46_class_0.score0(fdata);
  }
}
class gbm_model_Tree_46_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <793.90234f ? 
         (data[12 /* total_distance */] <1.5505905f ? 
             (Double.isNaN(data[12]) || data[12 /* total_distance */] <0.05148445f ? 
                 (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <3.3871774E-4f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.929214f ? 
                        0.02598613f : 
                        0.053768907f) : 
                     (data[6 /* pickup_hour */] <12.0f ? 
                        -0.18964319f : 
                        -0.12092848f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.79221f ? 
                     (Double.isNaN(data[10]) || data[10 /* log_euclidean_distance */] <4.422405E-5f ? 
                        -0.14175485f : 
                        -0.06537518f) : 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <0.45f ? 
                        -0.022791939f : 
                        -0.058917694f))) : 
             (data[9 /* log_haversine_distance */] <0.016125582f ? 
                 (data[9 /* log_haversine_distance */] <0.005085467f ? 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <641.85f ? 
                        -0.10625379f : 
                        -0.022839937f) : 
                     (Double.isNaN(data[12]) || data[12 /* total_distance */] <87.7875f ? 
                        -0.05981094f : 
                        -0.00862138f)) : 
                 (data[12 /* total_distance */] <82.06797f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.76411f ? 
                        -0.042748746f : 
                        -0.0026839133f) : 
                     (data[9 /* log_haversine_distance */] <0.09680678f ? 
                        0.03873941f : 
                        -0.005222189f)))) : 
         (data[5 /* pickup_weekday */] <0.5f ? 
             (data[12 /* total_distance */] <1728.0735f ? 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.81268f ? 
                     (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <0.8779717f ? 
                        -0.0044273157f : 
                        -0.01456382f) : 
                     (data[9 /* log_haversine_distance */] <0.2041405f ? 
                        -0.053155445f : 
                        -0.1628612f)) : 
                 (data[9 /* log_haversine_distance */] <0.72060806f ? 
                     (data[9 /* log_haversine_distance */] <0.6081793f ? 
                        -0.023097925f : 
                        -0.010398116f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <15.5f ? 
                        -5.026073E-4f : 
                        -0.0030629938f))) : 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                 (data[6 /* pickup_hour */] <8.5f ? 
                     (data[6 /* pickup_hour */] <0.5f ? 
                        0.003503366f : 
                        -0.0020438884f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <18.5f ? 
                        0.003240434f : 
                        -5.098275E-4f)) : 
                 (data[6 /* pickup_hour */] <1.5f ? 
                     (data[4 /* dropoff_latitude */] <40.743458f ? 
                        0.009043691f : 
                        1.2533313E-4f) : 
                     (data[6 /* pickup_hour */] <13.0f ? 
                        -0.006313748f : 
                        -8.047856E-4f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_47 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_47_class_0.score0(fdata);
  }
}
class gbm_model_Tree_47_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <3731.341f ? 
         (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.01635158f ? 
             (data[8 /* lon_diff */] <-0.015892329f ? 
                 (data[7 /* lat_diff */] <-0.012564421f ? 
                     (data[7 /* lat_diff */] <-0.021762509f ? 
                        -0.008510153f : 
                        -0.00100741f) : 
                     (data[4 /* dropoff_latitude */] <40.714966f ? 
                        -0.012665937f : 
                        0.0071497327f)) : 
                 (data[4 /* dropoff_latitude */] <40.7249f ? 
                     (data[3 /* dropoff_longitude */] <-74.005775f ? 
                        -0.0056201546f : 
                        0.0061741006f) : 
                     (data[4 /* dropoff_latitude */] <40.7464f ? 
                        -0.005066712f : 
                        -0.0010996764f))) : 
             (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.014352232f ? 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.98169f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.97585f ? 
                        0.0038253518f : 
                        0.012834503f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.91821f ? 
                        0.0012323483f : 
                        -0.02163988f)) : 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95373f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.767723f ? 
                        -0.0011137691f : 
                        -0.017122662f) : 
                     (data[2 /* pickup_latitude */] <40.77401f ? 
                        -0.031880368f : 
                        -0.004768131f)))) : 
         (data[10 /* log_euclidean_distance */] <0.024034793f ? 
             (data[10 /* log_euclidean_distance */] <0.010050757f ? 
                 (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.757545f ? 
                     (data[2 /* pickup_latitude */] <40.646008f ? 
                        0.03507288f : 
                        -0.05120502f) : 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.77462f ? 
                        0.013012544f : 
                        -0.07206218f)) : 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <6509.306f ? 
                     (data[2 /* pickup_latitude */] <40.71048f ? 
                        -0.017270355f : 
                        -0.004559944f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.95327f ? 
                        -0.03060909f : 
                        0.014588667f))) : 
             (data[3 /* dropoff_longitude */] <-74.010704f ? 
                 (data[4 /* dropoff_latitude */] <40.703907f ? 
                     (data[1 /* pickup_longitude */] <-73.98433f ? 
                        -0.0011141769f : 
                        -0.021288121f) : 
                     (data[1 /* pickup_longitude */] <-73.995674f ? 
                        -0.011745889f : 
                        -7.9358293E-4f)) : 
                 (data[1 /* pickup_longitude */] <-74.00946f ? 
                     (data[3 /* dropoff_longitude */] <-73.99942f ? 
                        -0.020941917f : 
                        -0.0018582956f) : 
                     (data[1 /* pickup_longitude */] <-73.979645f ? 
                        0.0036982396f : 
                        7.643634E-4f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_48 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_48_class_0.score0(fdata);
  }
}
class gbm_model_Tree_48_class_0 {
  static final double score0(double[] data) {
    double pred =      (data[12 /* total_distance */] <8375.67f ? 
         (data[3 /* dropoff_longitude */] <-73.98125f ? 
             (data[3 /* dropoff_longitude */] <-73.99362f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.99106f ? 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.7332f ? 
                        -0.0011210425f : 
                        -0.007873205f) : 
                     (data[4 /* dropoff_latitude */] <40.712635f ? 
                        -0.010053043f : 
                        0.00255422f)) : 
                 (data[4 /* dropoff_latitude */] <40.74382f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.98191f ? 
                        0.0036422175f : 
                        -0.008848355f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.761574f ? 
                        0.007606728f : 
                        -0.001120927f))) : 
             (data[1 /* pickup_longitude */] <-73.99049f ? 
                 (data[2 /* pickup_latitude */] <40.712902f ? 
                     (data[4 /* dropoff_latitude */] <40.711525f ? 
                        1.1162096E-4f : 
                        -0.025767965f) : 
                     (Double.isNaN(data[4]) || data[4 /* dropoff_latitude */] <40.784733f ? 
                        0.0059876633f : 
                        -0.009142496f)) : 
                 (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
                     (data[6 /* pickup_hour */] <6.0f ? 
                        -0.012846043f : 
                        1.6385871E-4f) : 
                     (data[2 /* pickup_latitude */] <40.75403f ? 
                        -0.008196805f : 
                        -0.004326709f)))) : 
         (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.87411f ? 
             (data[8 /* lon_diff */] <-0.06425023f ? 
                 (data[4 /* dropoff_latitude */] <40.707344f ? 
                     (data[12 /* total_distance */] <10024.977f ? 
                        0.013113075f : 
                        0.025948152f) : 
                     (data[2 /* pickup_latitude */] <40.722298f ? 
                        -0.0021123404f : 
                        0.012030288f)) : 
                 (Double.isNaN(data[12]) || data[12 /* total_distance */] <13670.342f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.02918768f ? 
                        0.003184294f : 
                        -0.0022755938f) : 
                     (data[8 /* lon_diff */] <0.019352436f ? 
                        0.012112452f : 
                        0.0043346835f))) : 
             (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.95518f ? 
                 (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <14.5f ? 
                     (Double.isNaN(data[2]) || data[2 /* pickup_latitude */] <40.757816f ? 
                        -0.0063950885f : 
                        0.0031542412f) : 
                     (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <17.5f ? 
                        0.013307649f : 
                        0.0021220644f)) : 
                 (data[7 /* lat_diff */] <-0.023628712f ? 
                     (data[6 /* pickup_hour */] <8.5f ? 
                        4.9915374E-4f : 
                        -0.010244697f) : 
                     (data[8 /* lon_diff */] <-0.0970279f ? 
                        -0.005881773f : 
                        -0.01730478f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


class gbm_model_Forest_49 {
  public static void score0(double[] fdata, double[] preds) {
    preds[0] += gbm_model_Tree_49_class_0.score0(fdata);
  }
}
class gbm_model_Tree_49_class_0 {
  static final double score0(double[] data) {
    double pred =      (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <20.5f ? 
         (data[6 /* pickup_hour */] <9.5f ? 
             (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.08543885f ? 
                 (data[6 /* pickup_hour */] <1.5f ? 
                     (data[5 /* pickup_weekday */] <3.5f ? 
                        -0.004583564f : 
                        0.0054352176f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        -0.0011579879f : 
                        -0.0072351824f)) : 
                 (data[6 /* pickup_hour */] <4.5f ? 
                     (Double.isNaN(data[7]) || data[7 /* lat_diff */] <0.017860413f ? 
                        -0.0080787605f : 
                        -0.024032727f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <4.5f ? 
                        0.022908848f : 
                        -0.010570774f))) : 
             (data[4 /* dropoff_latitude */] <40.746876f ? 
                 (Double.isNaN(data[9]) || data[9 /* log_haversine_distance */] <1.6045603f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.96892f ? 
                        -0.0014630058f : 
                        -0.013136562f) : 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.96087f ? 
                        0.0056866417f : 
                        -0.0017214753f)) : 
                 (data[3 /* dropoff_longitude */] <-73.97921f ? 
                     (data[1 /* pickup_longitude */] <-73.985435f ? 
                        0.0014171385f : 
                        0.009661061f) : 
                     (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
                        0.0027184114f : 
                        -0.0031118465f)))) : 
         (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <3.5f ? 
             (Double.isNaN(data[6]) || data[6 /* pickup_hour */] <22.5f ? 
                 (data[12 /* total_distance */] <1637.6719f ? 
                     (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.917786f ? 
                        -0.007402212f : 
                        0.019334244f) : 
                     (data[8 /* lon_diff */] <-0.060323596f ? 
                        0.0060627717f : 
                        -0.0022889604f)) : 
                 (data[8 /* lon_diff */] <-0.050302327f ? 
                     (data[2 /* pickup_latitude */] <40.72396f ? 
                        -0.0043696775f : 
                        0.007027504f) : 
                     (data[9 /* log_haversine_distance */] <0.1029806f ? 
                        0.019999804f : 
                        -0.008996433f))) : 
             (Double.isNaN(data[5]) || data[5 /* pickup_weekday */] <5.5f ? 
                 (Double.isNaN(data[1]) || data[1 /* pickup_longitude */] <-73.97855f ? 
                     (data[4 /* dropoff_latitude */] <40.73316f ? 
                        0.0101330485f : 
                        0.0029986915f) : 
                     (data[3 /* dropoff_longitude */] <-73.98501f ? 
                        0.00340247f : 
                        -0.006098756f)) : 
                 (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.96878f ? 
                     (Double.isNaN(data[8]) || data[8 /* lon_diff */] <0.1319437f ? 
                        -0.009720844f : 
                        0.0042091287f) : 
                     (Double.isNaN(data[3]) || data[3 /* dropoff_longitude */] <-73.9347f ? 
                        -0.0033643462f : 
                        0.0036403104f)))));
    return pred;
  } // constant pool size = 126B, number of visited nodes = 31, static init size = 0B
}


